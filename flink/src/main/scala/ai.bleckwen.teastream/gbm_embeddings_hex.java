/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-11-20T16:04:18.414+01:00
  3.16.0.2
  
  Standalone prediction code with sample test data for GBMModel named gbm_embeddings_hex

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/gbm_embeddings.hex > gbm_embeddings_hex.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_embeddings_hex.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_embeddings_hex", algorithm="gbm")
public class gbm_embeddings_hex extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 100; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_embeddings_hex.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ null,
    /* C6 */ null,
    /* C7 */ null,
    /* C8 */ null,
    /* C9 */ null,
    /* C10 */ null,
    /* C11 */ null,
    /* C12 */ null,
    /* C13 */ null,
    /* C14 */ null,
    /* C15 */ null,
    /* C16 */ null,
    /* C17 */ null,
    /* C18 */ null,
    /* C19 */ null,
    /* C20 */ null,
    /* C21 */ null,
    /* C22 */ null,
    /* C23 */ null,
    /* C24 */ null,
    /* C25 */ null,
    /* C26 */ null,
    /* C27 */ null,
    /* C28 */ null,
    /* C29 */ null,
    /* C30 */ null,
    /* C31 */ null,
    /* C32 */ null,
    /* C33 */ null,
    /* C34 */ null,
    /* C35 */ null,
    /* C36 */ null,
    /* C37 */ null,
    /* C38 */ null,
    /* C39 */ null,
    /* C40 */ null,
    /* C41 */ null,
    /* C42 */ null,
    /* C43 */ null,
    /* C44 */ null,
    /* C45 */ null,
    /* C46 */ null,
    /* C47 */ null,
    /* C48 */ null,
    /* C49 */ null,
    /* C50 */ null,
    /* C51 */ null,
    /* C52 */ null,
    /* C53 */ null,
    /* C54 */ null,
    /* C55 */ null,
    /* C56 */ null,
    /* C57 */ null,
    /* C58 */ null,
    /* C59 */ null,
    /* C60 */ null,
    /* C61 */ null,
    /* C62 */ null,
    /* C63 */ null,
    /* C64 */ null,
    /* C65 */ null,
    /* C66 */ null,
    /* C67 */ null,
    /* C68 */ null,
    /* C69 */ null,
    /* C70 */ null,
    /* C71 */ null,
    /* C72 */ null,
    /* C73 */ null,
    /* C74 */ null,
    /* C75 */ null,
    /* C76 */ null,
    /* C77 */ null,
    /* C78 */ null,
    /* C79 */ null,
    /* C80 */ null,
    /* C81 */ null,
    /* C82 */ null,
    /* C83 */ null,
    /* C84 */ null,
    /* C85 */ null,
    /* C86 */ null,
    /* C87 */ null,
    /* C88 */ null,
    /* C89 */ null,
    /* C90 */ null,
    /* C91 */ null,
    /* C92 */ null,
    /* C93 */ null,
    /* C94 */ null,
    /* C95 */ null,
    /* C96 */ null,
    /* C97 */ null,
    /* C98 */ null,
    /* C99 */ null,
    /* C100 */ null,
    /* Sentiment */ gbm_embeddings_hex_ColInfo_100.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.500145723048073,0.499854276951927};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.500145723048073,0.499854276951927};

  public gbm_embeddings_hex() { super(NAMES,DOMAINS,"Sentiment"); }
  public String getUUID() { return Long.toString(-7891929755683238893L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_embeddings_hex_Forest_0.score0(data,preds);
    gbm_embeddings_hex_Forest_1.score0(data,preds);
    gbm_embeddings_hex_Forest_2.score0(data,preds);
    gbm_embeddings_hex_Forest_3.score0(data,preds);
    gbm_embeddings_hex_Forest_4.score0(data,preds);
    gbm_embeddings_hex_Forest_5.score0(data,preds);
    gbm_embeddings_hex_Forest_6.score0(data,preds);
    gbm_embeddings_hex_Forest_7.score0(data,preds);
    gbm_embeddings_hex_Forest_8.score0(data,preds);
    gbm_embeddings_hex_Forest_9.score0(data,preds);
    gbm_embeddings_hex_Forest_10.score0(data,preds);
    gbm_embeddings_hex_Forest_11.score0(data,preds);
    gbm_embeddings_hex_Forest_12.score0(data,preds);
    gbm_embeddings_hex_Forest_13.score0(data,preds);
    gbm_embeddings_hex_Forest_14.score0(data,preds);
    gbm_embeddings_hex_Forest_15.score0(data,preds);
    gbm_embeddings_hex_Forest_16.score0(data,preds);
    gbm_embeddings_hex_Forest_17.score0(data,preds);
    gbm_embeddings_hex_Forest_18.score0(data,preds);
    gbm_embeddings_hex_Forest_19.score0(data,preds);
    gbm_embeddings_hex_Forest_20.score0(data,preds);
    gbm_embeddings_hex_Forest_21.score0(data,preds);
    gbm_embeddings_hex_Forest_22.score0(data,preds);
    gbm_embeddings_hex_Forest_23.score0(data,preds);
    gbm_embeddings_hex_Forest_24.score0(data,preds);
    gbm_embeddings_hex_Forest_25.score0(data,preds);
    gbm_embeddings_hex_Forest_26.score0(data,preds);
    gbm_embeddings_hex_Forest_27.score0(data,preds);
    gbm_embeddings_hex_Forest_28.score0(data,preds);
    gbm_embeddings_hex_Forest_29.score0(data,preds);
    gbm_embeddings_hex_Forest_30.score0(data,preds);
    gbm_embeddings_hex_Forest_31.score0(data,preds);
    gbm_embeddings_hex_Forest_32.score0(data,preds);
    gbm_embeddings_hex_Forest_33.score0(data,preds);
    gbm_embeddings_hex_Forest_34.score0(data,preds);
    gbm_embeddings_hex_Forest_35.score0(data,preds);
    gbm_embeddings_hex_Forest_36.score0(data,preds);
    gbm_embeddings_hex_Forest_37.score0(data,preds);
    gbm_embeddings_hex_Forest_38.score0(data,preds);
    gbm_embeddings_hex_Forest_39.score0(data,preds);
    gbm_embeddings_hex_Forest_40.score0(data,preds);
    gbm_embeddings_hex_Forest_41.score0(data,preds);
    gbm_embeddings_hex_Forest_42.score0(data,preds);
    gbm_embeddings_hex_Forest_43.score0(data,preds);
    gbm_embeddings_hex_Forest_44.score0(data,preds);
    gbm_embeddings_hex_Forest_45.score0(data,preds);
    gbm_embeddings_hex_Forest_46.score0(data,preds);
    gbm_embeddings_hex_Forest_47.score0(data,preds);
    gbm_embeddings_hex_Forest_48.score0(data,preds);
    gbm_embeddings_hex_Forest_49.score0(data,preds);
    preds[2] = preds[1] + -5.828922087957937E-4;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.38442075336347487);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_embeddings_hex implements java.io.Serializable {
  public static final String[] VALUES = new String[100];
  static {
    NamesHolder_gbm_embeddings_hex_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_embeddings_hex_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C1";
      sa[1] = "C2";
      sa[2] = "C3";
      sa[3] = "C4";
      sa[4] = "C5";
      sa[5] = "C6";
      sa[6] = "C7";
      sa[7] = "C8";
      sa[8] = "C9";
      sa[9] = "C10";
      sa[10] = "C11";
      sa[11] = "C12";
      sa[12] = "C13";
      sa[13] = "C14";
      sa[14] = "C15";
      sa[15] = "C16";
      sa[16] = "C17";
      sa[17] = "C18";
      sa[18] = "C19";
      sa[19] = "C20";
      sa[20] = "C21";
      sa[21] = "C22";
      sa[22] = "C23";
      sa[23] = "C24";
      sa[24] = "C25";
      sa[25] = "C26";
      sa[26] = "C27";
      sa[27] = "C28";
      sa[28] = "C29";
      sa[29] = "C30";
      sa[30] = "C31";
      sa[31] = "C32";
      sa[32] = "C33";
      sa[33] = "C34";
      sa[34] = "C35";
      sa[35] = "C36";
      sa[36] = "C37";
      sa[37] = "C38";
      sa[38] = "C39";
      sa[39] = "C40";
      sa[40] = "C41";
      sa[41] = "C42";
      sa[42] = "C43";
      sa[43] = "C44";
      sa[44] = "C45";
      sa[45] = "C46";
      sa[46] = "C47";
      sa[47] = "C48";
      sa[48] = "C49";
      sa[49] = "C50";
      sa[50] = "C51";
      sa[51] = "C52";
      sa[52] = "C53";
      sa[53] = "C54";
      sa[54] = "C55";
      sa[55] = "C56";
      sa[56] = "C57";
      sa[57] = "C58";
      sa[58] = "C59";
      sa[59] = "C60";
      sa[60] = "C61";
      sa[61] = "C62";
      sa[62] = "C63";
      sa[63] = "C64";
      sa[64] = "C65";
      sa[65] = "C66";
      sa[66] = "C67";
      sa[67] = "C68";
      sa[68] = "C69";
      sa[69] = "C70";
      sa[70] = "C71";
      sa[71] = "C72";
      sa[72] = "C73";
      sa[73] = "C74";
      sa[74] = "C75";
      sa[75] = "C76";
      sa[76] = "C77";
      sa[77] = "C78";
      sa[78] = "C79";
      sa[79] = "C80";
      sa[80] = "C81";
      sa[81] = "C82";
      sa[82] = "C83";
      sa[83] = "C84";
      sa[84] = "C85";
      sa[85] = "C86";
      sa[86] = "C87";
      sa[87] = "C88";
      sa[88] = "C89";
      sa[89] = "C90";
      sa[90] = "C91";
      sa[91] = "C92";
      sa[92] = "C93";
      sa[93] = "C94";
      sa[94] = "C95";
      sa[95] = "C96";
      sa[96] = "C97";
      sa[97] = "C98";
      sa[98] = "C99";
      sa[99] = "C100";
    }
  }
}
// The class representing column Sentiment
class gbm_embeddings_hex_ColInfo_100 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_embeddings_hex_ColInfo_100_0.fill(VALUES);
  }
  static final class gbm_embeddings_hex_ColInfo_100_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class gbm_embeddings_hex_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_0_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.047874894f ? 
         (data[94 /* C95 */] <-0.048403885f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <0.029381232f ? 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.095405936f ? 
                     (data[61 /* C62 */] <0.0030406434f ? 
                        -0.04658345f : 
                        -0.01906154f) : 
                     (data[61 /* C62 */] <-0.019425686f ? 
                        -0.022760341f : 
                        0.012619402f)) : 
                 (data[23 /* C24 */] <-0.049213685f ? 
                     (data[75 /* C76 */] <-0.22574754f ? 
                        0.12508322f : 
                        0.05235095f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.044084206f ? 
                        -0.0071664746f : 
                        0.038833525f))) : 
             (Double.isNaN(data[27]) || data[27 /* C28 */] <0.13822486f ? 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.08908482f ? 
                     (data[23 /* C24 */] <-0.006950766f ? 
                        -0.029676648f : 
                        -0.06851748f) : 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <-0.033489883f ? 
                        0.041772854f : 
                        -0.005971858f)) : 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.10816174f ? 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.38649192f ? 
                        -0.095582895f : 
                        -0.15696798f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.048594445f ? 
                        -0.068539485f : 
                        -0.020328647f)))) : 
         (data[94 /* C95 */] <-0.13282579f ? 
             (Double.isNaN(data[65]) || data[65 /* C66 */] <0.0035129571f ? 
                 (data[85 /* C86 */] <0.08772061f ? 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.056489147f ? 
                        0.06277742f : 
                        0.018888671f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.019072425f ? 
                        0.10668155f : 
                        0.07100336f)) : 
                 (data[61 /* C62 */] <-0.014875714f ? 
                     (data[36 /* C37 */] <0.07226811f ? 
                        0.05383924f : 
                        0.12832408f) : 
                     (Double.isNaN(data[59]) || data[59 /* C60 */] <0.040600263f ? 
                        0.17539653f : 
                        0.12501818f))) : 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.053918216f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.13096957f ? 
                     (data[8 /* C9 */] <-0.1128446f ? 
                        -0.007288546f : 
                        0.038199846f) : 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.1421097f ? 
                        -0.060891908f : 
                        6.3632807E-4f)) : 
                 (data[61 /* C62 */] <0.006690747f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.11390477f ? 
                        0.0010316324f : 
                        0.055653967f) : 
                     (data[38 /* C39 */] <0.058062375f ? 
                        0.04262314f : 
                        0.08910877f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_1_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.05980911f ? 
         (data[94 /* C95 */] <-0.06375332f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <0.006663724f ? 
                 (data[16 /* C17 */] <0.0038198642f ? 
                     (Double.isNaN(data[31]) || data[31 /* C32 */] <-0.10774868f ? 
                        -0.04965353f : 
                        -0.012879001f) : 
                     (data[61 /* C62 */] <0.0030406434f ? 
                        -0.020468568f : 
                        0.008696615f)) : 
                 (data[23 /* C24 */] <-0.061862916f ? 
                     (data[93 /* C94 */] <-0.048081294f ? 
                        0.1093275f : 
                        0.044916097f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.017500924f ? 
                        -0.005925574f : 
                        0.037436225f))) : 
             (Double.isNaN(data[38]) || data[38 /* C39 */] <0.10816174f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.1644468f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.077085935f ? 
                        -0.05954343f : 
                        -0.012415266f) : 
                     (data[30 /* C31 */] <-0.014019281f ? 
                        -0.12687837f : 
                        -0.08048337f)) : 
                 (data[22 /* C23 */] <0.014253241f ? 
                     (Double.isNaN(data[77]) || data[77 /* C78 */] <0.3207756f ? 
                        0.035126265f : 
                        0.15679301f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.019908812f ? 
                        -0.047608066f : 
                        -0.00532289f)))) : 
         (data[94 /* C95 */] <-0.10596428f ? 
             (Double.isNaN(data[65]) || data[65 /* C66 */] <0.0035129571f ? 
                 (data[61 /* C62 */] <0.01183866f ? 
                     (data[31 /* C32 */] <-8.8339625E-4f ? 
                        0.023698837f : 
                        0.05875551f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.019968674f ? 
                        0.06674819f : 
                        0.111734904f)) : 
                 (data[61 /* C62 */] <-0.10837602f ? 
                     (Double.isNaN(data[56]) || data[56 /* C57 */] <0.10804346f ? 
                        0.044066608f : 
                        -0.061180577f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <-0.0033560144f ? 
                        0.15068206f : 
                        0.09433136f))) : 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.027034612f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.09834798f ? 
                     (data[8 /* C9 */] <-0.13664387f ? 
                        -0.01238619f : 
                        0.032499325f) : 
                     (data[17 /* C18 */] <-0.053820282f ? 
                        -0.05790818f : 
                        -0.0135706505f)) : 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.04786738f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.11390477f ? 
                        0.006647922f : 
                        0.05615082f) : 
                     (data[8 /* C9 */] <-0.15197861f ? 
                        0.04442763f : 
                        0.08768955f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_2_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.035940677f ? 
         (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.02154237f ? 
             (Double.isNaN(data[85]) || data[85 /* C86 */] <0.15672691f ? 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.098676495f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.017781463f ? 
                        -0.04168918f : 
                        -0.010006394f) : 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.014879547f ? 
                        -0.014143817f : 
                        0.016191827f)) : 
                 (Double.isNaN(data[22]) || data[22 /* C23 */] <0.19802956f ? 
                     (data[38 /* C39 */] <0.07282152f ? 
                        0.008707581f : 
                        0.051843304f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.14382541f ? 
                        -0.010328352f : 
                        0.07384203f))) : 
             (Double.isNaN(data[27]) || data[27 /* C28 */] <0.120743565f ? 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.07436896f ? 
                     (data[23 /* C24 */] <-0.060029f ? 
                        -0.011544956f : 
                        -0.055723242f) : 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.09716162f ? 
                        -0.009027087f : 
                        0.03679726f)) : 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.027604556f ? 
                     (Double.isNaN(data[87]) || data[87 /* C88 */] <-0.055536803f ? 
                        -0.1152212f : 
                        -0.071148396f) : 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.076939516f ? 
                        -0.06972575f : 
                        -0.03251105f)))) : 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <-0.010855046f ? 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.08087613f ? 
                 (data[90 /* C91 */] <0.053682484f ? 
                     (data[48 /* C49 */] <0.03397848f ? 
                        0.03651289f : 
                        0.09458107f) : 
                     (data[94 /* C95 */] <-0.17784666f ? 
                        0.05641269f : 
                        0.015717383f)) : 
                 (data[19 /* C20 */] <-0.09809185f ? 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.1292656f ? 
                        -0.012829391f : 
                        -0.079037234f) : 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.07433348f ? 
                        -0.0044770525f : 
                        0.048086036f))) : 
             (data[85 /* C86 */] <0.10777619f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.014848993f ? 
                     (data[42 /* C43 */] <-0.17277719f ? 
                        0.0056669326f : 
                        0.053477205f) : 
                     (data[42 /* C43 */] <-0.07984105f ? 
                        -0.039853014f : 
                        0.018706547f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.06094084f ? 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.0121714845f ? 
                        0.08180307f : 
                        0.13770169f) : 
                     (data[25 /* C26 */] <0.08108045f ? 
                        0.027652666f : 
                        0.07492659f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_3_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.077710435f ? 
         (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.01770501f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <0.021808729f ? 
                 (data[94 /* C95 */] <-0.1145984f ? 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.18459155f ? 
                        0.009553964f : 
                        -0.029271973f) : 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.23972054f ? 
                        -0.027410453f : 
                        -0.05957629f)) : 
                 (Double.isNaN(data[23]) || data[23 /* C24 */] <-0.029030701f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.13187069f ? 
                        0.01439258f : 
                        0.05756206f) : 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.111706965f ? 
                        -0.023400092f : 
                        0.010733533f))) : 
             (Double.isNaN(data[23]) || data[23 /* C24 */] <0.004931026f ? 
                 (data[22 /* C23 */] <0.16418083f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.07436896f ? 
                        -0.025388496f : 
                        0.021469824f) : 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.33120078f ? 
                        -0.0457194f : 
                        -0.0961858f)) : 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.23437198f ? 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <0.016672313f ? 
                        -0.076181754f : 
                        -0.038343735f) : 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.012171464f ? 
                        -0.13330105f : 
                        -0.07898686f)))) : 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <0.034121573f ? 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.08205562f ? 
                 (Double.isNaN(data[31]) || data[31 /* C32 */] <0.0048502707f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.120365694f ? 
                        0.0070482157f : 
                        0.033412106f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.16020694f ? 
                        0.06255152f : 
                        0.0037148108f)) : 
                 (data[38 /* C39 */] <0.094719164f ? 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.1307169f ? 
                        -0.01602519f : 
                        -0.06340219f) : 
                     (data[19 /* C20 */] <-0.09809185f ? 
                        -0.014311363f : 
                        0.025722792f))) : 
             (Double.isNaN(data[11]) || data[11 /* C12 */] <-0.05128925f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.068707064f ? 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.015979744f ? 
                        0.07673287f : 
                        0.13063969f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.09048715f ? 
                        0.0651704f : 
                        0.014138296f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.033167887f ? 
                     (Double.isNaN(data[31]) || data[31 /* C32 */] <0.01642766f ? 
                        0.0259f : 
                        0.066625275f) : 
                     (data[42 /* C43 */] <-0.075360164f ? 
                        -0.037612226f : 
                        0.014994691f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_4_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.0757214f ? 
         (data[94 /* C95 */] <-0.071428046f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.016053785f ? 
                 (data[16 /* C17 */] <0.02932217f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.2581214f ? 
                        -0.020586364f : 
                        -0.059226543f) : 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.14456668f ? 
                        -0.009877452f : 
                        0.03396841f)) : 
                 (data[23 /* C24 */] <-0.12394709f ? 
                     (data[75 /* C76 */] <-0.22574754f ? 
                        0.12454334f : 
                        0.045766152f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.12204027f ? 
                        -0.0076571256f : 
                        0.025243277f))) : 
             (data[38 /* C39 */] <0.058553606f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.1819281f ? 
                     (data[60 /* C61 */] <-0.18724929f ? 
                        -0.015242263f : 
                        -0.056337573f) : 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.036373705f ? 
                        -0.10917235f : 
                        -0.06592375f)) : 
                 (Double.isNaN(data[85]) || data[85 /* C86 */] <0.12202227f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.082051456f ? 
                        -0.05184243f : 
                        -0.017751263f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.05822777f ? 
                        -0.012717316f : 
                        0.030076182f)))) : 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <0.022877418f ? 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.10708779f ? 
                 (data[34 /* C35 */] <0.048297856f ? 
                     (data[8 /* C9 */] <-0.11402634f ? 
                        0.0238603f : 
                        0.064097926f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.3543695f ? 
                        0.013402534f : 
                        -0.15240741f)) : 
                 (data[8 /* C9 */] <-0.13658246f ? 
                     (data[42 /* C43 */] <-0.12159553f ? 
                        -0.062961206f : 
                        -0.019697137f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.16264616f ? 
                        -0.007195572f : 
                        0.041454647f))) : 
             (data[85 /* C86 */] <0.10777619f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.021321494f ? 
                     (data[3 /* C4 */] <-0.015088497f ? 
                        0.051685102f : 
                        0.019460425f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.048862338f ? 
                        -0.033680547f : 
                        0.017677912f)) : 
                 (data[34 /* C35 */] <0.0039950367f ? 
                     (data[95 /* C96 */] <-0.12455666f ? 
                        0.11302324f : 
                        0.06738501f) : 
                     (data[38 /* C39 */] <0.065189384f ? 
                        0.019048756f : 
                        0.057217263f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_5_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.016050315f ? 
         (data[38 /* C39 */] <0.08566333f ? 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.01770501f ? 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.02226602f ? 
                     (data[60 /* C61 */] <-0.13964804f ? 
                        -0.0068673952f : 
                        -0.041254904f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.12579945f ? 
                        -0.0062081725f : 
                        0.057883218f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.02226602f ? 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.35099828f ? 
                        -0.059271194f : 
                        -0.10467082f) : 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <0.031223632f ? 
                        -0.03753188f : 
                        0.005502916f))) : 
             (Double.isNaN(data[85]) || data[85 /* C86 */] <0.13195102f ? 
                 (data[42 /* C43 */] <-0.07974088f ? 
                     (data[94 /* C95 */] <-0.07946017f ? 
                        -0.0077668857f : 
                        -0.037560146f) : 
                     (data[34 /* C35 */] <-0.23273112f ? 
                        -0.10543312f : 
                        0.008088786f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <0.004165563f ? 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.17179722f ? 
                        0.021908036f : 
                        -0.023270307f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.15077883f ? 
                        0.034566943f : 
                        0.07166524f)))) : 
         (data[27 /* C28 */] <0.103262275f ? 
             (Double.isNaN(data[31]) || data[31 /* C32 */] <0.050675657f ? 
                 (data[61 /* C62 */] <-0.027759857f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.14123648f ? 
                        4.4056046E-4f : 
                        0.042159777f) : 
                     (data[8 /* C9 */] <-0.14896025f ? 
                        0.02119055f : 
                        0.06100703f)) : 
                 (data[65 /* C66 */] <-0.09115111f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.16974716f ? 
                        0.042439956f : 
                        0.079350345f) : 
                     (data[8 /* C9 */] <-0.16768308f ? 
                        0.041348875f : 
                        0.10854221f))) : 
             (data[38 /* C39 */] <0.095937796f ? 
                 (data[51 /* C52 */] <-0.13266516f ? 
                     (data[96 /* C97 */] <0.03612633f ? 
                        -0.06458858f : 
                        -0.15459503f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.0020516776f ? 
                        8.103219E-5f : 
                        -0.049163166f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.06852608f ? 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.047401167f ? 
                        0.019367315f : 
                        -0.032069426f) : 
                     (data[90 /* C91 */] <0.030480783f ? 
                        0.09851433f : 
                        0.04234857f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_6_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.089644656f ? 
         (data[23 /* C24 */] <-0.017152369f ? 
             (data[22 /* C23 */] <0.13047668f ? 
                 (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.11576035f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.17436045f ? 
                        -0.011729376f : 
                        0.030326176f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.17865083f ? 
                        0.024043268f : 
                        0.071341164f)) : 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.16367748f ? 
                     (data[94 /* C95 */] <-0.12713881f ? 
                        0.023949124f : 
                        -0.018808413f) : 
                     (data[30 /* C31 */] <-0.036771923f ? 
                        -0.08168557f : 
                        -0.03162726f))) : 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.0023555725f ? 
                 (data[16 /* C17 */] <0.0038198642f ? 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.12263494f ? 
                        -0.06290327f : 
                        -0.029772382f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.1220245f ? 
                        -0.032345835f : 
                        -7.1429944E-4f)) : 
                 (Double.isNaN(data[17]) || data[17 /* C18 */] <-0.028227232f ? 
                     (data[28 /* C29 */] <-0.080857635f ? 
                        -0.10276139f : 
                        -0.06689417f) : 
                     (data[34 /* C35 */] <-0.2574346f ? 
                        -0.12331713f : 
                        -0.040297028f)))) : 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <-0.010855046f ? 
             (data[38 /* C39 */] <0.1421097f ? 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.13785334f ? 
                     (data[94 /* C95 */] <-0.1319018f ? 
                        0.004932601f : 
                        -0.03767235f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.16629693f ? 
                        0.021338632f : 
                        -0.046142556f)) : 
                 (data[90 /* C91 */] <0.11036733f ? 
                     (data[10 /* C11 */] <-0.16323991f ? 
                        0.072548725f : 
                        0.035353478f) : 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <-0.0061029345f ? 
                        0.019140506f : 
                        -0.011593688f))) : 
             (data[11 /* C12 */] <-0.08645562f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.045014277f ? 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.06832205f ? 
                        0.05161102f : 
                        0.09619549f) : 
                     (data[23 /* C24 */] <-0.0130229f ? 
                        0.055457562f : 
                        0.011113012f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.05686067f ? 
                     (data[8 /* C9 */] <-0.17418721f ? 
                        -0.0019196939f : 
                        0.03975585f) : 
                     (data[42 /* C43 */] <-0.075360164f ? 
                        -0.025943616f : 
                        0.013224714f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_7_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[31]) || data[31 /* C32 */] <-0.014061278f ? 
         (data[38 /* C39 */] <0.10553657f ? 
             (data[94 /* C95 */] <-0.04072917f ? 
                 (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.11532557f ? 
                     (data[60 /* C61 */] <-0.13964804f ? 
                        -0.0026611623f : 
                        -0.030471921f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.09437206f ? 
                        0.020788964f : 
                        -0.015676983f)) : 
                 (data[18 /* C19 */] <0.24199848f ? 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <0.0446775f ? 
                        -0.013285229f : 
                        -0.048324004f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.034953862f ? 
                        -0.06813245f : 
                        -0.035391267f))) : 
             (data[85 /* C86 */] <0.09478717f ? 
                 (Double.isNaN(data[80]) || data[80 /* C81 */] <0.06013047f ? 
                     (data[54 /* C55 */] <-0.046327885f ? 
                        -0.06253855f : 
                        -0.013041535f) : 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.08040024f ? 
                        -0.0011860171f : 
                        0.033399284f)) : 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <-0.018302746f ? 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.11882745f ? 
                        0.018201249f : 
                        -0.010131125f) : 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.06911178f ? 
                        0.024300165f : 
                        0.060020525f)))) : 
         (Double.isNaN(data[27]) || data[27 /* C28 */] <0.103262275f ? 
             (data[8 /* C9 */] <-0.10997254f ? 
                 (data[38 /* C39 */] <0.09838493f ? 
                     (data[82 /* C83 */] <0.061086737f ? 
                        0.029059771f : 
                        -0.007811189f) : 
                     (data[90 /* C91 */] <0.04274386f ? 
                        0.07882655f : 
                        0.032618582f)) : 
                 (data[65 /* C66 */] <-0.09115111f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.023940936f ? 
                        0.031562973f : 
                        0.06313727f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.05142448f ? 
                        0.09417299f : 
                        0.05078868f))) : 
             (Double.isNaN(data[38]) || data[38 /* C39 */] <0.1421097f ? 
                 (data[51 /* C52 */] <-0.10686047f ? 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <-0.061936975f ? 
                        -0.1207572f : 
                        -0.05195229f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.0085326005f ? 
                        0.010291837f : 
                        -0.035491794f)) : 
                 (data[42 /* C43 */] <-0.12006527f ? 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.047967654f ? 
                        -0.009141972f : 
                        0.030602625f) : 
                     (data[10 /* C11 */] <-0.072492644f ? 
                        0.07499947f : 
                        0.033104166f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_8_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.097600795f ? 
         (data[94 /* C95 */] <-0.09061484f ? 
             (data[99 /* C100 */] <-0.27636474f ? 
                 (Double.isNaN(data[11]) || data[11 /* C12 */] <0.46488884f ? 
                     (data[94 /* C95 */] <-0.18936698f ? 
                        0.06740127f : 
                        0.022487683f) : 
                    -0.15570867f) : 
                 (data[42 /* C43 */] <-0.06277264f ? 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.18495181f ? 
                        -0.013412551f : 
                        -0.050790507f) : 
                     (data[79 /* C80 */] <-0.10269803f ? 
                        0.031304732f : 
                        -0.006815981f))) : 
             (data[23 /* C24 */] <-0.01508495f ? 
                 (data[56 /* C57 */] <-0.09993752f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.17436045f ? 
                        0.001802573f : 
                        0.04543898f) : 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.21661237f ? 
                        -0.015213042f : 
                        -0.047788527f)) : 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.056469858f ? 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.2658111f ? 
                        -0.04002698f : 
                        -0.070431106f) : 
                     (data[46 /* C47 */] <-0.28977853f ? 
                        -0.08931703f : 
                        -0.021391539f)))) : 
         (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.106637776f ? 
             (data[38 /* C39 */] <0.10363311f ? 
                 (data[42 /* C43 */] <-0.15596561f ? 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.028972851f ? 
                        -0.0775231f : 
                        -0.031667378f) : 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.10375368f ? 
                        0.0036363706f : 
                        -0.025180766f)) : 
                 (data[90 /* C91 */] <0.041830897f ? 
                     (data[51 /* C52 */] <-0.030612385f ? 
                        -0.006935234f : 
                        0.06440631f) : 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.04469342f ? 
                        -4.9094827E-4f : 
                        0.027150696f))) : 
             (data[27 /* C28 */] <0.06920132f ? 
                 (Double.isNaN(data[31]) || data[31 /* C32 */] <0.047893554f ? 
                     (data[55 /* C56 */] <0.09323034f ? 
                        0.01552363f : 
                        0.0516854f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.10009831f ? 
                        0.08974054f : 
                        0.041100804f)) : 
                 (data[94 /* C95 */] <-0.09918315f ? 
                     (Double.isNaN(data[90]) || data[90 /* C91 */] <0.10609424f ? 
                        0.053577017f : 
                        0.0153291505f) : 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.08847016f ? 
                        -0.018883502f : 
                        0.022019958f)))));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 30, static init size = 0B
}


class gbm_embeddings_hex_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_9_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[31]) || data[31 /* C32 */] <-0.012072242f ? 
         (data[38 /* C39 */] <0.07771403f ? 
             (Double.isNaN(data[27]) || data[27 /* C28 */] <0.13822486f ? 
                 (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.056568056f ? 
                     (data[60 /* C61 */] <-0.15285671f ? 
                        -0.0011518681f : 
                        -0.030049033f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.16079475f ? 
                        0.0013919106f : 
                        0.041985743f)) : 
                 (data[17 /* C18 */] <-0.099157445f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.024466123f ? 
                        -0.08014986f : 
                        -0.017309485f) : 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.02733165f ? 
                        -0.048439745f : 
                        -0.019551866f))) : 
             (data[42 /* C43 */] <-0.06295959f ? 
                 (Double.isNaN(data[51]) || data[51 /* C52 */] <0.07344193f ? 
                     (data[71 /* C72 */] <0.08147616f ? 
                        -9.826567E-4f : 
                        -0.03309468f) : 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.07590458f ? 
                        -0.0029552546f : 
                        0.028086852f)) : 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.124022245f ? 
                     (data[61 /* C62 */] <-0.040272564f ? 
                        -0.025332788f : 
                        0.011937673f) : 
                     (data[25 /* C26 */] <-0.06375942f ? 
                        0.0065089935f : 
                        0.045972493f)))) : 
         (data[90 /* C91 */] <0.100190535f ? 
             (data[54 /* C55 */] <0.010035974f ? 
                 (data[61 /* C62 */] <-0.084553f ? 
                     (Double.isNaN(data[35]) || data[35 /* C36 */] <0.1448065f ? 
                        -0.03705541f : 
                        0.036478788f) : 
                     (data[4 /* C5 */] <0.0110724475f ? 
                        -0.015999759f : 
                        0.040849738f)) : 
                 (Double.isNaN(data[34]) || data[34 /* C35 */] <0.062512204f ? 
                     (data[95 /* C96 */] <-0.10232973f ? 
                        0.095541425f : 
                        0.05542878f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.024217047f ? 
                        0.019812461f : 
                        0.0617364f))) : 
             (Double.isNaN(data[27]) || data[27 /* C28 */] <0.12713046f ? 
                 (Double.isNaN(data[82]) || data[82 /* C83 */] <0.07690258f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.16264616f ? 
                        0.02937568f : 
                        0.05931596f) : 
                     (data[60 /* C61 */] <-0.14808652f ? 
                        0.027555536f : 
                        -0.0024335019f)) : 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.146785f ? 
                     (data[51 /* C52 */] <-0.13266516f ? 
                        -0.108196765f : 
                        -0.022577183f) : 
                     (data[42 /* C43 */] <-0.25275505f ? 
                        -0.0162527f : 
                        0.019712735f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_10_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.11749116f ? 
         (Double.isNaN(data[94]) || data[94 /* C95 */] <0.03601802f ? 
             (Double.isNaN(data[85]) || data[85 /* C86 */] <0.15653498f ? 
                 (Double.isNaN(data[16]) || data[16 /* C17 */] <0.03728977f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.09923768f ? 
                        -0.046213068f : 
                        -0.017178684f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.10810104f ? 
                        -0.022959428f : 
                        0.0065235496f)) : 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.16568628f ? 
                     (data[50 /* C51 */] <-0.2823458f ? 
                        -0.04188747f : 
                        0.007002836f) : 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <0.19666862f ? 
                        0.055603784f : 
                        0.12952013f))) : 
             (Double.isNaN(data[87]) || data[87 /* C88 */] <0.038856156f ? 
                 (Double.isNaN(data[17]) || data[17 /* C18 */] <0.0143027f ? 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.3015709f ? 
                        -0.05424925f : 
                        -0.09039663f) : 
                     (data[23 /* C24 */] <-0.1351808f ? 
                        0.024956238f : 
                        -0.034047984f)) : 
                 (data[66 /* C67 */] <-0.51351494f ? 
                     (data[30 /* C31 */] <-0.26092216f ? 
                        0.0016344987f : 
                        0.17991185f) : 
                     (data[20 /* C21 */] <-0.3131536f ? 
                        0.09067338f : 
                        -0.012630171f)))) : 
         (data[94 /* C95 */] <-0.12131371f ? 
             (Double.isNaN(data[34]) || data[34 /* C35 */] <0.028020857f ? 
                 (data[58 /* C59 */] <0.017904688f ? 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.12172903f ? 
                        0.0026133654f : 
                        0.054164637f) : 
                     (data[95 /* C96 */] <-0.09328892f ? 
                        0.080993354f : 
                        0.045198414f)) : 
                 (data[7 /* C8 */] <0.014486181f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.13390648f ? 
                        0.02022325f : 
                        0.044006262f) : 
                     (data[61 /* C62 */] <-0.041590087f ? 
                        -0.019931884f : 
                        0.014874412f))) : 
             (data[19 /* C20 */] <-0.029045457f ? 
                 (data[69 /* C70 */] <-0.04482866f ? 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.121187285f ? 
                        0.021021841f : 
                        -0.013578446f) : 
                     (data[8 /* C9 */] <-0.127797f ? 
                        -0.039108485f : 
                        -0.00815317f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.033401877f ? 
                     (data[8 /* C9 */] <-0.1451269f ? 
                        -0.012160167f : 
                        0.017027956f) : 
                     (data[55 /* C56 */] <0.13823304f ? 
                        0.021051338f : 
                        0.056675974f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_11_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[22]) || data[22 /* C23 */] <0.16884562f ? 
         (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.12331155f ? 
             (data[61 /* C62 */] <0.05660988f ? 
                 (Double.isNaN(data[97]) || data[97 /* C98 */] <0.04855931f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.1578926f ? 
                        -0.014192563f : 
                        0.016948642f) : 
                     (data[58 /* C59 */] <0.038173646f ? 
                        -0.06794548f : 
                        -0.023977924f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <0.027882792f ? 
                     (data[4 /* C5 */] <-0.031171765f ? 
                        -0.026525613f : 
                        0.010498316f) : 
                     (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.16076887f ? 
                        0.014264878f : 
                        0.06859998f))) : 
             (Double.isNaN(data[55]) || data[55 /* C56 */] <0.12678578f ? 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.049294136f ? 
                     (data[90 /* C91 */] <0.09621969f ? 
                        0.024920192f : 
                        -0.009591209f) : 
                     (data[94 /* C95 */] <-0.18044546f ? 
                        0.07835134f : 
                        0.02831066f)) : 
                 (Double.isNaN(data[23]) || data[23 /* C24 */] <0.007676482f ? 
                     (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.05304562f ? 
                        0.06641261f : 
                        0.038620118f) : 
                     (data[76 /* C77 */] <-0.13389847f ? 
                        -0.06137653f : 
                        0.028679997f)))) : 
         (data[94 /* C95 */] <-0.109801635f ? 
             (data[94 /* C95 */] <-0.1949621f ? 
                 (data[31 /* C32 */] <-0.22527857f ? 
                     (data[47 /* C48 */] <-0.080379896f ? 
                        0.07521475f : 
                        -0.04487272f) : 
                     (Double.isNaN(data[93]) || data[93 /* C94 */] <0.049180202f ? 
                        0.06313469f : 
                        0.023267567f)) : 
                 (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.099992104f ? 
                     (data[51 /* C52 */] <0.05856264f ? 
                        -0.005568757f : 
                        0.02649372f) : 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.14459017f ? 
                        -0.01940167f : 
                        0.026051404f))) : 
             (data[28 /* C29 */] <-0.054975647f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.14946307f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.0060819397f ? 
                        -0.039485283f : 
                        -0.007708149f) : 
                     (data[54 /* C55 */] <0.01466826f ? 
                        -0.08921173f : 
                        -0.051374618f)) : 
                 (Double.isNaN(data[23]) || data[23 /* C24 */] <0.0446775f ? 
                     (data[60 /* C61 */] <-0.11386109f ? 
                        0.007387393f : 
                        -0.018759934f) : 
                     (data[7 /* C8 */] <-0.07184375f ? 
                        -0.007598425f : 
                        -0.036602702f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_12_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[31]) || data[31 /* C32 */] <-0.0021270607f ? 
         (Double.isNaN(data[23]) || data[23 /* C24 */] <0.007676482f ? 
             (data[31 /* C32 */] <-0.13708632f ? 
                 (data[68 /* C69 */] <-0.077616654f ? 
                     (data[23 /* C24 */] <-0.1397452f ? 
                        0.04092239f : 
                        -0.0037965535f) : 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.15614887f ? 
                        -0.032606095f : 
                        0.0030857662f)) : 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.12033135f ? 
                     (data[61 /* C62 */] <-0.041547246f ? 
                        -0.020122757f : 
                        0.008011546f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.03543666f ? 
                        0.019331405f : 
                        0.05558293f))) : 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.01770501f ? 
                 (data[61 /* C62 */] <-0.05927261f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.0090427995f ? 
                        -0.01585735f : 
                        -0.05332472f) : 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.07877831f ? 
                        -0.012272942f : 
                        0.01719652f)) : 
                 (Double.isNaN(data[19]) || data[19 /* C20 */] <0.0013898658f ? 
                     (data[28 /* C29 */] <-0.049568094f ? 
                        -0.06520249f : 
                        -0.038848948f) : 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.057236202f ? 
                        -0.029221287f : 
                        0.0020845414f)))) : 
         (Double.isNaN(data[27]) || data[27 /* C28 */] <0.15570615f ? 
             (data[90 /* C91 */] <0.07018217f ? 
                 (Double.isNaN(data[34]) || data[34 /* C35 */] <0.058443986f ? 
                     (data[65 /* C66 */] <-0.117927924f ? 
                        0.04131093f : 
                        0.08352431f) : 
                     (data[25 /* C26 */] <0.057731044f ? 
                        0.008330183f : 
                        0.045022562f)) : 
                 (data[61 /* C62 */] <-0.052721146f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.18743898f ? 
                        -0.011493601f : 
                        0.04155122f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.045200042f ? 
                        0.044473954f : 
                        0.01398312f))) : 
             (data[42 /* C43 */] <-0.107685424f ? 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.15781741f ? 
                     (data[51 /* C52 */] <-0.11951712f ? 
                        -0.100673676f : 
                        -0.03809151f) : 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.03314576f ? 
                        -0.02086978f : 
                        0.021853365f)) : 
                 (data[38 /* C39 */] <0.114695646f ? 
                     (data[19 /* C20 */] <-0.11255531f ? 
                        -0.03136569f : 
                        0.008869441f) : 
                     (data[10 /* C11 */] <-0.14343448f ? 
                        0.06675298f : 
                        0.023110498f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_13_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[38 /* C39 */] <0.083676f ? 
         (data[27 /* C28 */] <0.063929364f ? 
             (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.089964f ? 
                 (data[60 /* C61 */] <-0.18173294f ? 
                     (Double.isNaN(data[16]) || data[16 /* C17 */] <0.08902754f ? 
                        0.008274756f : 
                        0.04174658f) : 
                     (data[8 /* C9 */] <-0.18023364f ? 
                        -0.029844083f : 
                        -0.005255909f)) : 
                 (data[55 /* C56 */] <0.09932315f ? 
                     (data[61 /* C62 */] <-0.05414771f ? 
                        -0.02781878f : 
                        0.012170023f) : 
                     (data[65 /* C66 */] <-0.13812518f ? 
                        0.014876492f : 
                        0.04810555f))) : 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <0.03601802f ? 
                 (data[60 /* C61 */] <-0.1263592f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.16697903f ? 
                        -0.01163901f : 
                        0.025356002f) : 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.0914316f ? 
                        -0.037182406f : 
                        -0.011063923f)) : 
                 (data[68 /* C69 */] <-0.1101315f ? 
                     (data[3 /* C4 */] <-0.13436256f ? 
                        0.047466524f : 
                        -0.035446297f) : 
                     (data[17 /* C18 */] <-0.08497493f ? 
                        -0.08418726f : 
                        -0.050601188f)))) : 
         (Double.isNaN(data[85]) || data[85 /* C86 */] <0.08645296f ? 
             (data[58 /* C59 */] <0.07276088f ? 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.0986679f ? 
                     (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.04022623f ? 
                        -0.016399851f : 
                        -0.04540709f) : 
                     (data[42 /* C43 */] <-0.14813152f ? 
                        -0.02118987f : 
                        0.021968313f)) : 
                 (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.098010585f ? 
                     (data[42 /* C43 */] <-0.14969078f ? 
                        -0.03164794f : 
                        0.005111042f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.03516877f ? 
                        0.015911797f : 
                        0.04494325f))) : 
             (Double.isNaN(data[61]) || data[61 /* C62 */] <0.043847047f ? 
                 (Double.isNaN(data[83]) || data[83 /* C84 */] <0.116117254f ? 
                     (data[56 /* C57 */] <-0.042924374f ? 
                        0.022581896f : 
                        -0.0099066375f) : 
                     (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.05902334f ? 
                        0.041660864f : 
                        0.012364601f)) : 
                 (Double.isNaN(data[11]) || data[11 /* C12 */] <-8.4264437E-4f ? 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.039301865f ? 
                        0.052252f : 
                        0.0066000153f) : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] <0.1161131f ? 
                        0.019058036f : 
                        -0.036798082f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_14_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.07718408f ? 
         (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.07537376f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <0.025366731f ? 
                 (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.07367209f ? 
                     (data[90 /* C91 */] <0.065932065f ? 
                        0.02617582f : 
                        7.3598395E-4f) : 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.21862216f ? 
                        -0.012503859f : 
                        -0.048307624f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <0.05321579f ? 
                     (data[17 /* C18 */] <-0.06034454f ? 
                        -0.008603861f : 
                        0.024408748f) : 
                     (data[86 /* C87 */] <0.033259995f ? 
                        0.039521232f : 
                        0.087225385f))) : 
             (Double.isNaN(data[34]) || data[34 /* C35 */] <0.02781537f ? 
                 (data[51 /* C52 */] <0.04859646f ? 
                     (data[42 /* C43 */] <-0.12115422f ? 
                        0.006609287f : 
                        0.04521509f) : 
                     (data[48 /* C49 */] <0.05787518f ? 
                        0.048428018f : 
                        0.08546508f)) : 
                 (data[61 /* C62 */] <-0.06685588f ? 
                     (data[7 /* C8 */] <0.0060024373f ? 
                        0.010133107f : 
                        -0.05653509f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.16550946f ? 
                        0.01128831f : 
                        0.048555184f)))) : 
         (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.024800835f ? 
             (Double.isNaN(data[27]) || data[27 /* C28 */] <0.20815003f ? 
                 (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.07866312f ? 
                     (data[69 /* C70 */] <-0.07661468f ? 
                        -0.007464399f : 
                        -0.031877175f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.18171105f ? 
                        -0.003150874f : 
                        0.030377025f)) : 
                 (Double.isNaN(data[87]) || data[87 /* C88 */] <-0.0036198366f ? 
                     (Double.isNaN(data[17]) || data[17 /* C18 */] <-0.05660989f ? 
                        -0.0830921f : 
                        -0.043944027f) : 
                     (data[14 /* C15 */] <-0.54104525f ? 
                        0.19597043f : 
                        -0.0213187f))) : 
             (data[22 /* C23 */] <0.10898566f ? 
                 (data[23 /* C24 */] <-0.042994857f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.23441319f ? 
                        0.035349082f : 
                        0.07809299f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.031434253f ? 
                        0.025094293f : 
                        -0.007066567f)) : 
                 (data[31 /* C32 */] <-0.18816245f ? 
                     (Double.isNaN(data[16]) || data[16 /* C17 */] <0.13271777f ? 
                        -0.039939336f : 
                        0.0152897565f) : 
                     (data[8 /* C9 */] <-0.19472148f ? 
                        -0.024050932f : 
                        0.007370731f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_15_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[31 /* C32 */] <-0.1254473f ? 
         (data[56 /* C57 */] <-0.09573973f ? 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <0.14849867f ? 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.10804924f ? 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <0.034573577f ? 
                        -0.002696935f : 
                        -0.033645894f) : 
                     (data[54 /* C55 */] <-0.115352884f ? 
                        -0.05339747f : 
                        0.025935827f)) : 
                 (Double.isNaN(data[79]) || data[79 /* C80 */] <-0.09880659f ? 
                     (data[54 /* C55 */] <0.011556935f ? 
                        0.017622149f : 
                        0.098831855f) : 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.2020862f ? 
                        0.052809063f : 
                        -0.015122906f))) : 
             (Double.isNaN(data[16]) || data[16 /* C17 */] <0.03728977f ? 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.13643083f ? 
                     (Double.isNaN(data[64]) || data[64 /* C65 */] <-0.08113097f ? 
                        -0.05185778f : 
                        -0.026372554f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.0136076175f ? 
                        -0.027064908f : 
                        0.023065232f)) : 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.08141729f ? 
                     (data[82 /* C83 */] <0.04173585f ? 
                        0.00418179f : 
                        -0.024360616f) : 
                     (Double.isNaN(data[15]) || data[15 /* C16 */] <-0.0055198353f ? 
                        0.0041257516f : 
                        0.06797224f)))) : 
         (data[61 /* C62 */] <-0.037091408f ? 
             (data[94 /* C95 */] <-0.17614397f ? 
                 (data[68 /* C69 */] <-0.090304434f ? 
                     (data[42 /* C43 */] <-0.29319477f ? 
                        -0.0034935162f : 
                        0.06517814f) : 
                     (data[48 /* C49 */] <-0.041525953f ? 
                        -0.015845308f : 
                        0.02326912f)) : 
                 (data[54 /* C55 */] <9.9409E-4f ? 
                     (data[56 /* C57 */] <-0.014755664f ? 
                        -0.0140133f : 
                        -0.045532566f) : 
                     (data[71 /* C72 */] <0.0811144f ? 
                        0.012427156f : 
                        -0.01725603f))) : 
             (data[11 /* C12 */] <-0.05128925f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <0.034154914f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.17038679f ? 
                        0.021303495f : 
                        0.054530594f) : 
                     (data[27 /* C28 */] <-0.0060290117f ? 
                        0.021813406f : 
                        -0.017440371f)) : 
                 (data[8 /* C9 */] <-0.14998959f ? 
                     (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.13227126f ? 
                        -0.02795427f : 
                        5.6251016E-4f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.075360164f ? 
                        -0.0013002765f : 
                        0.023540929f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_16_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[38 /* C39 */] <0.06777741f ? 
         (data[60 /* C61 */] <-0.15424852f ? 
             (data[85 /* C86 */] <0.08645296f ? 
                 (data[42 /* C43 */] <-0.09152237f ? 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.076006025f ? 
                        -0.03962327f : 
                        0.010679423f) : 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.10795791f ? 
                        -0.007015088f : 
                        0.019335087f)) : 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.14240687f ? 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.22003195f ? 
                        0.0068638963f : 
                        -0.049725316f) : 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <0.053503226f ? 
                        0.04032089f : 
                        0.005353998f))) : 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.035318732f ? 
                 (data[28 /* C29 */] <-0.06210567f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.06374124f ? 
                        -0.06597875f : 
                        -0.033200007f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.026473045f ? 
                        -0.017407337f : 
                        -0.04607719f)) : 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.08683996f ? 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.17346965f ? 
                        -0.011225757f : 
                        -0.04372502f) : 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.07526566f ? 
                        -0.0017812037f : 
                        0.03286119f)))) : 
         (Double.isNaN(data[85]) || data[85 /* C86 */] <0.10422231f ? 
             (data[58 /* C59 */] <0.08676919f ? 
                 (data[54 /* C55 */] <0.039237276f ? 
                     (data[46 /* C47 */] <-0.18674728f ? 
                        -0.057720944f : 
                        -0.020613333f) : 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.113811426f ? 
                        -0.011987001f : 
                        0.019421156f)) : 
                 (data[3 /* C4 */] <-0.0028433613f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.13804504f ? 
                        0.012994284f : 
                        0.0382408f) : 
                     (data[71 /* C72 */] <0.076687574f ? 
                        0.024096603f : 
                        -0.0052383235f))) : 
             (data[95 /* C96 */] <-0.09979174f ? 
                 (Double.isNaN(data[22]) || data[22 /* C23 */] <0.24193417f ? 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.029323783f ? 
                        0.056067392f : 
                        0.024267659f) : 
                     (data[31 /* C32 */] <-0.2665859f ? 
                        -0.085816264f : 
                        9.373936E-4f)) : 
                 (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.06620198f ? 
                     (data[56 /* C57 */] <-0.04227688f ? 
                        0.017244905f : 
                        -0.008173897f) : 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.08577547f ? 
                        0.031340614f : 
                        0.0048219613f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_17_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[94 /* C95 */] <-0.13090712f ? 
         (data[70 /* C71 */] <-0.08817723f ? 
             (data[85 /* C86 */] <0.08147554f ? 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.14981659f ? 
                     (data[58 /* C59 */] <-0.06590563f ? 
                        -0.038568392f : 
                        0.015506492f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.06689687f ? 
                        0.052926995f : 
                        0.009636165f)) : 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.08031359f ? 
                     (data[55 /* C56 */] <0.06940479f ? 
                        0.018986156f : 
                        0.047840465f) : 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.14818959f ? 
                        0.07858762f : 
                        0.018930249f))) : 
             (data[58 /* C59 */] <-0.008599737f ? 
                 (data[74 /* C75 */] <0.12841532f ? 
                     (data[51 /* C52 */] <-0.012154363f ? 
                        -0.015534998f : 
                        0.021238329f) : 
                     (data[23 /* C24 */] <-0.1844547f ? 
                        0.05269522f : 
                        -0.030551994f)) : 
                 (data[94 /* C95 */] <-0.27570757f ? 
                     (Double.isNaN(data[49]) || data[49 /* C50 */] <0.33403143f ? 
                        0.07462948f : 
                        0.001987786f) : 
                     (Double.isNaN(data[11]) || data[11 /* C12 */] <0.04792487f ? 
                        0.020681614f : 
                        -0.013393999f)))) : 
         (data[42 /* C43 */] <-0.073233835f ? 
             (Double.isNaN(data[51]) || data[51 /* C52 */] <0.07821803f ? 
                 (data[17 /* C18 */] <-0.083214045f ? 
                     (data[50 /* C51 */] <-0.15669346f ? 
                        -0.063092664f : 
                        -0.033631127f) : 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.065246046f ? 
                        -0.02645136f : 
                        0.0024385785f)) : 
                 (data[54 /* C55 */] <0.010543137f ? 
                     (Double.isNaN(data[33]) || data[33 /* C34 */] <0.07374491f ? 
                        -0.015646782f : 
                        -0.06540044f) : 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.10884626f ? 
                        -0.004126253f : 
                        0.02207788f))) : 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.005332837f ? 
                 (data[4 /* C5 */] <0.027609766f ? 
                     (data[95 /* C96 */] <-0.12110683f ? 
                        0.0014233454f : 
                        -0.02561963f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.10756986f ? 
                        -0.0020684325f : 
                        0.023433842f)) : 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.14052469f ? 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.10003425f ? 
                        -9.022326E-4f : 
                        0.028374987f) : 
                     (data[38 /* C39 */] <0.050764635f ? 
                        0.007875066f : 
                        0.039916106f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_18_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[22]) || data[22 /* C23 */] <0.1787664f ? 
         (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.12998106f ? 
             (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.114772156f ? 
                 (data[34 /* C35 */] <0.015811926f ? 
                     (data[90 /* C91 */] <0.036404286f ? 
                        0.06869416f : 
                        0.019509979f) : 
                     (data[42 /* C43 */] <-0.08529122f ? 
                        -0.022712156f : 
                        0.0051429495f)) : 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.08593851f ? 
                     (data[58 /* C59 */] <0.010231967f ? 
                        -0.03876243f : 
                        -0.013085027f) : 
                     (data[60 /* C61 */] <-0.14177169f ? 
                        0.032957535f : 
                        -7.60313E-4f))) : 
             (data[55 /* C56 */] <0.064994864f ? 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.06238338f ? 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.04608112f ? 
                        -0.027042868f : 
                        0.0046437583f) : 
                     (data[10 /* C11 */] <-0.19039962f ? 
                        0.056675773f : 
                        0.012298947f)) : 
                 (data[58 /* C59 */] <0.06114526f ? 
                     (data[23 /* C24 */] <-0.008876085f ? 
                        0.025095612f : 
                        3.992933E-4f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.015718639f ? 
                        0.040827267f : 
                        0.0071349074f)))) : 
         (Double.isNaN(data[27]) || data[27 /* C28 */] <0.16881712f ? 
             (data[94 /* C95 */] <-0.17864074f ? 
                 (Double.isNaN(data[93]) || data[93 /* C94 */] <0.053239673f ? 
                     (data[94 /* C95 */] <-0.27111498f ? 
                        0.07748496f : 
                        0.03716368f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <0.07421012f ? 
                        0.020495271f : 
                        -0.046478614f)) : 
                 (data[60 /* C61 */] <-0.14810099f ? 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.09825667f ? 
                        -0.0037059155f : 
                        0.01996276f) : 
                     (data[54 /* C55 */] <-6.842986E-5f ? 
                        -0.035702944f : 
                        -0.01112887f))) : 
             (data[28 /* C29 */] <-0.0687911f ? 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <-0.020164326f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.08338422f ? 
                        -0.085354246f : 
                        -0.040698797f) : 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <0.039261214f ? 
                        -0.04195057f : 
                        0.024222583f)) : 
                 (data[51 /* C52 */] <0.04934817f ? 
                     (data[56 /* C57 */] <-0.05192998f ? 
                        -0.017661564f : 
                        -0.045775555f) : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] <0.053259883f ? 
                        0.0011024383f : 
                        -0.027805815f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_19_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[38]) || data[38 /* C39 */] <0.14528306f ? 
         (data[42 /* C43 */] <-0.02267552f ? 
             (data[28 /* C29 */] <-0.034252465f ? 
                 (Double.isNaN(data[51]) || data[51 /* C52 */] <0.10472083f ? 
                     (Double.isNaN(data[17]) || data[17 /* C18 */] <-0.01686988f ? 
                        -0.042872254f : 
                        -0.018487083f) : 
                     (data[4 /* C5 */] <-0.0037460811f ? 
                        -0.018811213f : 
                        0.008304021f)) : 
                 (data[34 /* C35 */] <0.013447626f ? 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <-0.04812298f ? 
                        0.032486822f : 
                        -0.003753479f) : 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.09465389f ? 
                        -0.0040228525f : 
                        -0.027944751f))) : 
             (data[60 /* C61 */] <-0.11146676f ? 
                 (data[55 /* C56 */] <0.09634559f ? 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.0044629425f ? 
                        0.015092662f : 
                        -0.009433716f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.05040487f ? 
                        0.03304651f : 
                        7.9375546E-5f)) : 
                 (data[54 /* C55 */] <0.08700717f ? 
                     (Double.isNaN(data[82]) || data[82 /* C83 */] <0.08036842f ? 
                        -0.0021604083f : 
                        -0.025442224f) : 
                     (data[7 /* C8 */] <-0.0017956886f ? 
                        0.042694584f : 
                        0.005409705f)))) : 
         (data[90 /* C91 */] <0.06883591f ? 
             (data[65 /* C66 */] <-0.18003115f ? 
                 (data[74 /* C75 */] <0.13394769f ? 
                     (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.035748515f ? 
                        0.020120448f : 
                        0.06257334f) : 
                     (data[5 /* C6 */] <-0.18646303f ? 
                        0.034872554f : 
                        -0.007146419f)) : 
                 (data[42 /* C43 */] <-0.14880742f ? 
                     (data[4 /* C5 */] <0.017670441f ? 
                        -0.026413545f : 
                        0.029411772f) : 
                     (data[48 /* C49 */] <0.004733191f ? 
                        0.03285454f : 
                        0.0646449f))) : 
             (Double.isNaN(data[56]) || data[56 /* C57 */] <0.008910716f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.15605989f ? 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.116981514f ? 
                        0.03399045f : 
                        0.013895153f) : 
                     (data[16 /* C17 */] <-0.25919533f ? 
                        -0.10092395f : 
                        -9.900494E-4f)) : 
                 (data[61 /* C62 */] <-0.09383424f ? 
                     (Double.isNaN(data[15]) || data[15 /* C16 */] <-0.17320181f ? 
                        -0.062110525f : 
                        -0.015307587f) : 
                     (Double.isNaN(data[82]) || data[82 /* C83 */] <0.1320591f ? 
                        0.011403239f : 
                        -0.01426835f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_20_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.046485208f ? 
         (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.07537376f ? 
             (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.0065628598f ? 
                 (Double.isNaN(data[79]) || data[79 /* C80 */] <-0.077257186f ? 
                     (data[31 /* C32 */] <-0.19855392f ? 
                        -0.032665987f : 
                        0.008199872f) : 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.14125006f ? 
                        -0.0049792253f : 
                        -0.025786068f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <1.9283779E-4f ? 
                     (Double.isNaN(data[71]) || data[71 /* C72 */] <0.13142984f ? 
                        0.014215499f : 
                        -0.010329705f) : 
                     (Double.isNaN(data[86]) || data[86 /* C87 */] <0.07746798f ? 
                        0.024136897f : 
                        0.060954038f))) : 
             (data[61 /* C62 */] <-0.059842218f ? 
                 (data[83 /* C84 */] <0.10688864f ? 
                     (data[34 /* C35 */] <-0.0049485993f ? 
                        0.008707784f : 
                        -0.046158478f) : 
                     (Double.isNaN(data[9]) || data[9 /* C10 */] <-0.03459408f ? 
                        -0.0011653252f : 
                        0.0438569f)) : 
                 (Double.isNaN(data[34]) || data[34 /* C35 */] <0.058850884f ? 
                     (data[4 /* C5 */] <0.057861805f ? 
                        0.02615707f : 
                        0.05812307f) : 
                     (data[72 /* C73 */] <0.05302756f ? 
                        -0.013232457f : 
                        0.021360153f)))) : 
         (Double.isNaN(data[19]) || data[19 /* C20 */] <0.021890003f ? 
             (data[60 /* C61 */] <-0.17836526f ? 
                 (Double.isNaN(data[23]) || data[23 /* C24 */] <0.011986629f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.02770768f ? 
                        0.0042476235f : 
                        0.033222277f) : 
                     (data[64 /* C65 */] <-0.1356485f ? 
                        -0.0441193f : 
                        -0.0028690328f)) : 
                 (data[54 /* C55 */] <0.033674408f ? 
                     (data[28 /* C29 */] <-0.064594746f ? 
                        -0.0512362f : 
                        -0.02569174f) : 
                     (data[58 /* C59 */] <0.052683983f ? 
                        -0.026760885f : 
                        -0.0033756185f))) : 
             (Double.isNaN(data[55]) || data[55 /* C56 */] <0.18857671f ? 
                 (data[8 /* C9 */] <-0.17725542f ? 
                     (data[54 /* C55 */] <-0.1431152f ? 
                        -0.09714896f : 
                        -0.010458998f) : 
                     (Double.isNaN(data[13]) || data[13 /* C14 */] <-0.07691541f ? 
                        0.0024224245f : 
                        0.024983512f)) : 
                 (data[82 /* C83 */] <0.011649309f ? 
                     (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.10098635f ? 
                        0.038717043f : 
                        0.08558667f) : 
                     (Double.isNaN(data[86]) || data[86 /* C87 */] <0.07027015f ? 
                        0.007267299f : 
                        0.04400207f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_21_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[31]) || data[31 /* C32 */] <0.017763302f ? 
         (Double.isNaN(data[23]) || data[23 /* C24 */] <-0.025428653f ? 
             (Double.isNaN(data[55]) || data[55 /* C56 */] <0.09735467f ? 
                 (Double.isNaN(data[76]) || data[76 /* C77 */] <0.20851336f ? 
                     (data[38 /* C39 */] <0.033997923f ? 
                        -0.023438748f : 
                        -0.0010811408f) : 
                     (data[69 /* C70 */] <-0.10770559f ? 
                        0.047655415f : 
                        0.014026511f)) : 
                 (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.052958272f ? 
                     (data[8 /* C9 */] <-0.17642899f ? 
                        0.00210035f : 
                        0.028304787f) : 
                     (data[50 /* C51 */] <-0.20739701f ? 
                        -0.028808963f : 
                        0.008305389f))) : 
             (Double.isNaN(data[94]) || data[94 /* C95 */] <0.012993866f ? 
                 (data[55 /* C56 */] <0.08646204f ? 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.1456613f ? 
                        -0.024447812f : 
                        0.009847854f) : 
                     (data[16 /* C17 */] <0.0038198642f ? 
                        -0.015716055f : 
                        0.006846419f)) : 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.08347594f ? 
                     (data[71 /* C72 */] <0.10140847f ? 
                        -0.02638195f : 
                        -0.048166096f) : 
                     (data[7 /* C8 */] <-0.042552438f ? 
                        0.018302456f : 
                        -0.015941039f)))) : 
         (data[51 /* C52 */] <-0.031423036f ? 
             (data[58 /* C59 */] <0.048956774f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] <-0.10938969f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.083469115f ? 
                        0.0023298198f : 
                        -0.041484673f) : 
                     (data[67 /* C68 */] <-0.30413845f ? 
                        -0.14415568f : 
                        -0.05549113f)) : 
                 (data[15 /* C16 */] <-0.22814909f ? 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.16567844f ? 
                        0.026495242f : 
                        0.084907405f) : 
                     (data[91 /* C92 */] <-0.02688448f ? 
                        -0.05210258f : 
                        0.008661868f))) : 
             (data[45 /* C46 */] <-0.056575824f ? 
                 (Double.isNaN(data[88]) || data[88 /* C89 */] <0.0029175198f ? 
                     (data[69 /* C70 */] <-0.03774267f ? 
                        0.018341376f : 
                        -0.009467083f) : 
                     (data[62 /* C63 */] <0.04928147f ? 
                        0.008475684f : 
                        0.056165215f)) : 
                 (data[65 /* C66 */] <-0.11451262f ? 
                     (Double.isNaN(data[89]) || data[89 /* C90 */] <0.0734925f ? 
                        0.013343113f : 
                        0.05078588f) : 
                     (data[61 /* C62 */] <-0.09763747f ? 
                        0.008785989f : 
                        0.056356385f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_22_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.081627116f ? 
         (data[16 /* C17 */] <-0.0012711306f ? 
             (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.06538171f ? 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.1310349f ? 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.07580356f ? 
                        -0.026090467f : 
                        7.898954E-4f) : 
                     (data[25 /* C26 */] <-0.03554984f ? 
                        -0.00412087f : 
                        0.03137781f)) : 
                 (data[46 /* C47 */] <-0.16919106f ? 
                     (Double.isNaN(data[12]) || data[12 /* C13 */] <-0.060555514f ? 
                        -0.059819993f : 
                        -0.030682243f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.014445037f ? 
                        -0.011988999f : 
                        -0.04024032f))) : 
             (data[61 /* C62 */] <0.021749897f ? 
                 (data[71 /* C72 */] <0.09653229f ? 
                     (data[90 /* C91 */] <0.10674323f ? 
                        0.023558777f : 
                        -8.298566E-4f) : 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.092130594f ? 
                        -0.025177058f : 
                        0.0027759199f)) : 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.025689902f ? 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.35030338f ? 
                        0.0037384105f : 
                        -0.034954246f) : 
                     (data[34 /* C35 */] <0.01810374f ? 
                        0.032831028f : 
                        0.010352909f)))) : 
         (Double.isNaN(data[27]) || data[27 /* C28 */] <0.16881712f ? 
             (data[55 /* C56 */] <0.0667191f ? 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.064378746f ? 
                     (data[90 /* C91 */] <0.086820394f ? 
                        0.013471386f : 
                        -0.01704941f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <0.064740814f ? 
                        0.026528858f : 
                        -0.024927555f)) : 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.06827171f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.24441794f ? 
                        0.020664467f : 
                        -0.0073613008f) : 
                     (data[58 /* C59 */] <-0.0035427948f ? 
                        0.015349243f : 
                        0.042240724f))) : 
             (data[31 /* C32 */] <-0.19500174f ? 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.068599544f ? 
                     (data[20 /* C21 */] <-0.35591355f ? 
                        0.112683944f : 
                        -0.054657754f) : 
                     (data[99 /* C100 */] <-0.19908226f ? 
                        0.04259737f : 
                        -0.015022148f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.08280104f ? 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.024712132f ? 
                        -0.035576507f : 
                        -0.002392894f) : 
                     (data[19 /* C20 */] <-0.13071293f ? 
                        -0.0057906597f : 
                        0.019530509f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_23_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <0.037936702f ? 
         (data[82 /* C83 */] <0.04803738f ? 
             (data[45 /* C46 */] <-0.06988757f ? 
                 (Double.isNaN(data[21]) || data[21 /* C22 */] <0.20490317f ? 
                     (data[68 /* C69 */] <-0.09068449f ? 
                        0.01814664f : 
                        -0.0066376287f) : 
                     (Double.isNaN(data[57]) || data[57 /* C58 */] <0.012987744f ? 
                        -0.04612539f : 
                        0.055824395f)) : 
                 (data[61 /* C62 */] <-0.07307989f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.15613209f ? 
                        -0.010665311f : 
                        0.028190643f) : 
                     (Double.isNaN(data[27]) || data[27 /* C28 */] <0.09829349f ? 
                        0.039558083f : 
                        0.016770372f))) : 
             (data[85 /* C86 */] <0.12628402f ? 
                 (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.104822785f ? 
                     (data[56 /* C57 */] <-0.025142014f ? 
                        0.010918698f : 
                        -0.010256699f) : 
                     (data[95 /* C96 */] <-0.08304205f ? 
                        -0.007646275f : 
                        -0.028005742f)) : 
                 (data[79 /* C80 */] <-0.11123049f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.2181758f ? 
                        0.036360655f : 
                        -0.0023205145f) : 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.047299266f ? 
                        0.005586101f : 
                        -0.018788032f)))) : 
         (data[95 /* C96 */] <-0.16065848f ? 
             (data[56 /* C57 */] <-0.09122538f ? 
                 (Double.isNaN(data[88]) || data[88 /* C89 */] <-0.0066836867f ? 
                     (Double.isNaN(data[87]) || data[87 /* C88 */] <0.24572031f ? 
                        0.016733766f : 
                        0.1330337f) : 
                     (data[7 /* C8 */] <-0.25048098f ? 
                        0.1869653f : 
                        0.058486383f)) : 
                 (Double.isNaN(data[49]) || data[49 /* C50 */] <0.1223755f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.19688925f ? 
                        0.0055113602f : 
                        0.056092903f) : 
                     (Double.isNaN(data[79]) || data[79 /* C80 */] <0.19545648f ? 
                        -0.030947043f : 
                        0.074208826f))) : 
             (Double.isNaN(data[19]) || data[19 /* C20 */] <0.058126956f ? 
                 (data[60 /* C61 */] <-0.2216508f ? 
                     (data[85 /* C86 */] <0.02231868f ? 
                        -0.038725853f : 
                        0.011848199f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.1265261f ? 
                        -0.03215921f : 
                        -0.059700955f)) : 
                 (data[60 /* C61 */] <-0.108614154f ? 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.07395718f ? 
                        0.005869783f : 
                        0.03794311f) : 
                     (data[54 /* C55 */] <-0.011632398f ? 
                        -0.04723687f : 
                        -2.4377069E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_24_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[38]) || data[38 /* C39 */] <0.12540981f ? 
         (data[54 /* C55 */] <-0.002168207f ? 
             (data[60 /* C61 */] <-0.15614408f ? 
                 (data[17 /* C18 */] <-0.07079241f ? 
                     (data[64 /* C65 */] <-0.1473906f ? 
                        -0.052195635f : 
                        -0.013680991f) : 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.18161696f ? 
                        -2.5301275E-4f : 
                        0.03346851f)) : 
                 (Double.isNaN(data[29]) || data[29 /* C30 */] <0.077139266f ? 
                     (data[28 /* C29 */] <-0.04558361f ? 
                        -0.05810964f : 
                        -0.025016775f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.10729287f ? 
                        -0.02228652f : 
                        0.004255787f))) : 
             (Double.isNaN(data[82]) || data[82 /* C83 */] <0.07358355f ? 
                 (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.020437011f ? 
                     (Double.isNaN(data[57]) || data[57 /* C58 */] <-0.03640589f ? 
                        -0.0056540654f : 
                        0.020049881f) : 
                     (data[34 /* C35 */] <0.027988203f ? 
                        0.0360469f : 
                        0.010065891f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <0.024082921f ? 
                     (data[51 /* C52 */] <0.043550003f ? 
                        -0.025188502f : 
                        -0.0037118923f) : 
                     (data[68 /* C69 */] <-0.08451701f ? 
                        0.03286584f : 
                        0.0017741709f)))) : 
         (data[90 /* C91 */] <0.041400604f ? 
             (data[17 /* C18 */] <-0.04976004f ? 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <0.021930212f ? 
                     (data[42 /* C43 */] <-0.18884867f ? 
                        -0.012635782f : 
                        0.029645592f) : 
                     (data[37 /* C38 */] <-0.14639987f ? 
                        -0.09660054f : 
                        -0.01935021f)) : 
                 (data[48 /* C49 */] <0.046058316f ? 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.08577547f ? 
                        0.040553875f : 
                        0.0022082757f) : 
                     (data[54 /* C55 */] <0.017154202f ? 
                        0.028083012f : 
                        0.063377865f))) : 
             (data[56 /* C57 */] <-0.052641645f ? 
                 (data[71 /* C72 */] <0.07438469f ? 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.107534565f ? 
                        0.041999195f : 
                        0.01426756f) : 
                     (data[3 /* C4 */] <-0.041347414f ? 
                        0.029297655f : 
                        0.006018276f)) : 
                 (data[61 /* C62 */] <-0.064848706f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.038191397f ? 
                        -0.009019132f : 
                        -0.04691326f) : 
                     (data[58 /* C59 */] <0.041275408f ? 
                        -0.006793592f : 
                        0.013168674f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_25_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[38 /* C39 */] <0.045916848f ? 
         (data[60 /* C61 */] <-0.1831886f ? 
             (Double.isNaN(data[23]) || data[23 /* C24 */] <0.047274094f ? 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.04133153f ? 
                     (Double.isNaN(data[87]) || data[87 /* C88 */] <0.06738943f ? 
                        0.0035667506f : 
                        0.028864073f) : 
                     (data[71 /* C72 */] <-0.0032127574f ? 
                        0.055695962f : 
                        0.022274107f)) : 
                 (data[20 /* C21 */] <-0.07396837f ? 
                     (data[82 /* C83 */] <-0.062484816f ? 
                        0.07604062f : 
                        0.005000823f) : 
                     (Double.isNaN(data[72]) || data[72 /* C73 */] <0.21686578f ? 
                        -0.024018377f : 
                        0.031110032f))) : 
             (data[68 /* C69 */] <-0.050790995f ? 
                 (data[94 /* C95 */] <-0.1938151f ? 
                     (data[81 /* C82 */] <0.004985273f ? 
                        0.020579627f : 
                        0.0691727f) : 
                     (data[42 /* C43 */] <-0.16024938f ? 
                        -0.033148192f : 
                        -0.0050035976f)) : 
                 (data[95 /* C96 */] <-0.14931236f ? 
                     (Double.isNaN(data[88]) || data[88 /* C89 */] <-0.019183293f ? 
                        -0.011760332f : 
                        0.024943635f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.008827676f ? 
                        -0.04518286f : 
                        -0.023773933f)))) : 
         (Double.isNaN(data[58]) || data[58 /* C59 */] <0.08593262f ? 
             (data[23 /* C24 */] <-0.050257504f ? 
                 (data[84 /* C85 */] <-0.10992965f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.22554743f ? 
                        -0.012783472f : 
                        0.028454449f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.019168947f ? 
                        0.011170641f : 
                        0.034356017f)) : 
                 (data[4 /* C5 */] <0.1295344f ? 
                     (data[95 /* C96 */] <-0.071849674f ? 
                        -0.0020985922f : 
                        -0.023256943f) : 
                     (data[60 /* C61 */] <-0.116981514f ? 
                        0.027653623f : 
                        -0.0013025405f))) : 
             (data[45 /* C46 */] <-0.033408135f ? 
                 (data[68 /* C69 */] <-0.0884933f ? 
                     (data[8 /* C9 */] <-0.14234266f ? 
                        -0.0013379441f : 
                        0.024310866f) : 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.09774345f ? 
                        0.0072038104f : 
                        -0.013373111f)) : 
                 (data[31 /* C32 */] <-0.13539249f ? 
                     (data[22 /* C23 */] <0.055011667f ? 
                        0.034455627f : 
                        -0.003976373f) : 
                     (data[90 /* C91 */] <0.114610694f ? 
                        0.04296056f : 
                        0.019015782f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_26_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[94 /* C95 */] <-0.14433788f ? 
         (Double.isNaN(data[70]) || data[70 /* C71 */] <-0.03613245f ? 
             (Double.isNaN(data[34]) || data[34 /* C35 */] <0.057605464f ? 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.10001549f ? 
                     (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.04508387f ? 
                        0.03479347f : 
                        0.004360109f) : 
                     (data[42 /* C43 */] <-0.2352911f ? 
                        0.0053316085f : 
                        0.05485798f)) : 
                 (data[72 /* C73 */] <0.017989581f ? 
                     (data[84 /* C85 */] <-0.18852901f ? 
                        0.02458827f : 
                        -0.02149564f) : 
                     (data[83 /* C84 */] <0.059467107f ? 
                        0.0010492529f : 
                        0.02480265f))) : 
             (data[58 /* C59 */] <-0.061608586f ? 
                 (data[37 /* C38 */] <-0.10902277f ? 
                     (data[55 /* C56 */] <0.035587676f ? 
                        -0.016219122f : 
                        0.069187894f) : 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.16741064f ? 
                        -0.013801575f : 
                        -0.05971816f)) : 
                 (data[99 /* C100 */] <-0.42034382f ? 
                     (data[19 /* C20 */] <-0.12906577f ? 
                        0.010363193f : 
                        0.075374946f) : 
                     (Double.isNaN(data[11]) || data[11 /* C12 */] <0.20201705f ? 
                        0.008041184f : 
                        -0.08928929f)))) : 
         (data[19 /* C20 */] <-0.07149167f ? 
             (Double.isNaN(data[64]) || data[64 /* C65 */] <-0.059261747f ? 
                 (data[28 /* C29 */] <-0.06926265f ? 
                     (Double.isNaN(data[46]) || data[46 /* C47 */] <-0.11982359f ? 
                        -0.042848792f : 
                        -0.016404562f) : 
                     (data[82 /* C83 */] <0.0775653f ? 
                        -8.094173E-4f : 
                        -0.02146367f)) : 
                 (data[60 /* C61 */] <-0.18801194f ? 
                     (data[31 /* C32 */] <-0.20111766f ? 
                        -0.013204562f : 
                        0.02591992f) : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] <0.024658311f ? 
                        0.004243435f : 
                        -0.014679141f))) : 
             (Double.isNaN(data[58]) || data[58 /* C59 */] <0.025449637f ? 
                 (data[25 /* C26 */] <0.06891077f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.030469269f ? 
                        -0.0077866144f : 
                        -0.030258022f) : 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.05788809f ? 
                        -2.1759819E-5f : 
                        0.02880734f)) : 
                 (data[31 /* C32 */] <-0.14693892f ? 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.081088275f ? 
                        -0.0131292045f : 
                        0.014496996f) : 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.1350982f ? 
                        0.012109606f : 
                        0.03729427f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_27_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[42 /* C43 */] <-0.07553194f ? 
         (Double.isNaN(data[51]) || data[51 /* C52 */] <0.10060913f ? 
             (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.04294448f ? 
                 (data[17 /* C18 */] <-0.04933521f ? 
                     (data[99 /* C100 */] <-0.29129922f ? 
                        0.0037975514f : 
                        -0.025330348f) : 
                     (data[13 /* C14 */] <-0.0985965f ? 
                        -0.010968156f : 
                        0.012350416f)) : 
                 (Double.isNaN(data[71]) || data[71 /* C72 */] <0.13253677f ? 
                     (data[28 /* C29 */] <-0.0472659f ? 
                        -0.030572569f : 
                        -0.0069545414f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <2.1022186E-4f ? 
                        -0.022998525f : 
                        -0.057743717f))) : 
             (data[10 /* C11 */] <-0.16960096f ? 
                 (data[48 /* C49 */] <0.017727174f ? 
                     (data[19 /* C20 */] <-0.28927827f ? 
                        -0.062466204f : 
                        0.01229899f) : 
                     (data[85 /* C86 */] <0.038341865f ? 
                        0.011566298f : 
                        0.057274934f)) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] <0.040261593f ? 
                     (data[80 /* C81 */] <0.008699163f ? 
                        -0.0032167851f : 
                        0.018324096f) : 
                     (Double.isNaN(data[17]) || data[17 /* C18 */] <-0.045296498f ? 
                        -0.030866696f : 
                        -0.002542044f)))) : 
         (Double.isNaN(data[4]) || data[4 /* C5 */] <0.06516274f ? 
             (data[23 /* C24 */] <-0.060806815f ? 
                 (data[25 /* C26 */] <-0.051547192f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.23123507f ? 
                        0.0044891424f : 
                        -0.024694098f) : 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.135728f ? 
                        0.015939645f : 
                        0.041429415f)) : 
                 (data[8 /* C9 */] <-0.1609324f ? 
                     (data[46 /* C47 */] <-0.15311614f ? 
                        -0.034465346f : 
                        -0.009150186f) : 
                     (data[58 /* C59 */] <0.051838264f ? 
                        -0.011904423f : 
                        0.007000845f))) : 
             (Double.isNaN(data[5]) || data[5 /* C6 */] <-0.061794687f ? 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.10100061f ? 
                     (data[71 /* C72 */] <0.10140847f ? 
                        0.036337994f : 
                        0.015741792f) : 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.034725014f ? 
                        0.05655129f : 
                        0.008833947f)) : 
                 (data[60 /* C61 */] <-0.1381126f ? 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.092392206f ? 
                        0.03205339f : 
                        0.002714114f) : 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.06663251f ? 
                        -0.010368297f : 
                        0.01522632f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_28_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.0042742523f ? 
         (Double.isNaN(data[55]) || data[55 /* C56 */] <0.112672456f ? 
             (Double.isNaN(data[61]) || data[61 /* C62 */] <0.06892611f ? 
                 (data[48 /* C49 */] <0.052285325f ? 
                     (data[71 /* C72 */] <0.11002062f ? 
                        -0.004995189f : 
                        -0.029729936f) : 
                     (data[90 /* C91 */] <0.023024585f ? 
                        0.04223422f : 
                        -0.0020091862f)) : 
                 (Double.isNaN(data[11]) || data[11 /* C12 */] <7.903343E-4f ? 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.1126336f ? 
                        0.013698104f : 
                        0.045453005f) : 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.08005741f ? 
                        -2.9494302E-5f : 
                        -0.055358794f))) : 
             (data[8 /* C9 */] <-0.16999812f ? 
                 (Double.isNaN(data[16]) || data[16 /* C17 */] <0.039601658f ? 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <0.0096070375f ? 
                        -0.024134265f : 
                        0.007687662f) : 
                     (data[56 /* C57 */] <-0.12225788f ? 
                        0.03978514f : 
                        0.003085653f)) : 
                 (Double.isNaN(data[22]) || data[22 /* C23 */] <0.22837022f ? 
                     (data[58 /* C59 */] <0.010141348f ? 
                        0.0044792877f : 
                        0.026784344f) : 
                     (data[27 /* C28 */] <0.08744501f ? 
                        0.0135159595f : 
                        -0.012910998f)))) : 
         (data[56 /* C57 */] <-0.051406734f ? 
             (data[95 /* C96 */] <-0.13747926f ? 
                 (data[23 /* C24 */] <-0.06414726f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.108555496f ? 
                        0.022555696f : 
                        0.064413875f) : 
                     (Double.isNaN(data[88]) || data[88 /* C89 */] <-0.0066836867f ? 
                        0.0040743104f : 
                        0.038130328f)) : 
                 (data[60 /* C61 */] <-0.15910535f ? 
                     (data[85 /* C86 */] <0.06666321f ? 
                        -0.011117345f : 
                        0.020939957f) : 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.13695022f ? 
                        -0.0089075295f : 
                        -0.043034628f))) : 
             (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.12176743f ? 
                 (data[54 /* C55 */] <0.024999008f ? 
                     (data[71 /* C72 */] <0.06741536f ? 
                        -0.027280532f : 
                        -0.050738562f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.077085935f ? 
                        -0.02427918f : 
                        0.005303054f)) : 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.20679277f ? 
                     (data[19 /* C20 */] <-0.13815348f ? 
                        -0.02981567f : 
                        -0.0049438416f) : 
                     (Double.isNaN(data[89]) || data[89 /* C90 */] <-0.017320432f ? 
                        0.017234541f : 
                        0.076565355f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_29_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[54 /* C55 */] <0.058425866f ? 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.10119173f ? 
             (Double.isNaN(data[30]) || data[30 /* C31 */] <0.030745376f ? 
                 (data[94 /* C95 */] <-0.070646375f ? 
                     (Double.isNaN(data[22]) || data[22 /* C23 */] <0.14723939f ? 
                        0.01431428f : 
                        -0.007870383f) : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] <0.014139659f ? 
                        -0.0048867883f : 
                        -0.03035026f)) : 
                 (data[56 /* C57 */] <-0.022011561f ? 
                     (data[46 /* C47 */] <-0.36452466f ? 
                        -0.050269708f : 
                        0.0229847f) : 
                     (data[51 /* C52 */] <-0.023735825f ? 
                        -0.021664713f : 
                        0.0069205984f))) : 
             (Double.isNaN(data[16]) || data[16 /* C17 */] <0.052778326f ? 
                 (data[68 /* C69 */] <-0.061749324f ? 
                     (data[3 /* C4 */] <-0.12220324f ? 
                        0.01959942f : 
                        -0.018329134f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.05449264f ? 
                        -0.028176647f : 
                        -0.050749768f)) : 
                 (data[94 /* C95 */] <-0.19156116f ? 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.07110121f ? 
                        0.05033509f : 
                        0.0024557605f) : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] <-0.0013409993f ? 
                        0.0016395511f : 
                        -0.019345168f)))) : 
         (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.033798523f ? 
             (data[51 /* C52 */] <0.07944444f ? 
                 (Double.isNaN(data[49]) || data[49 /* C50 */] <0.079690784f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.019140566f ? 
                        -0.00636463f : 
                        0.015375673f) : 
                     (data[4 /* C5 */] <0.016951256f ? 
                        -0.03196479f : 
                        -0.011147453f)) : 
                 (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.084987134f ? 
                     (data[74 /* C75 */] <0.12025517f ? 
                        0.01272352f : 
                        -0.00437637f) : 
                     (data[48 /* C49 */] <-0.022084463f ? 
                        -0.010764563f : 
                        0.043269332f))) : 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.03646415f ? 
                 (Double.isNaN(data[71]) || data[71 /* C72 */] <0.18415403f ? 
                     (data[58 /* C59 */] <0.016395405f ? 
                        -0.0027213846f : 
                        0.018824259f) : 
                     (data[97 /* C98 */] <-0.035624556f ? 
                        0.0026198498f : 
                        -0.028029768f)) : 
                 (Double.isNaN(data[49]) || data[49 /* C50 */] <0.09080355f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.1546993f ? 
                        0.02533596f : 
                        0.04788401f) : 
                     (Double.isNaN(data[11]) || data[11 /* C12 */] <-0.03402724f ? 
                        0.021214029f : 
                        -7.606901E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_30_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[23]) || data[23 /* C24 */] <0.02629812f ? 
         (Double.isNaN(data[55]) || data[55 /* C56 */] <0.14330803f ? 
             (Double.isNaN(data[71]) || data[71 /* C72 */] <0.112482876f ? 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.045712166f ? 
                     (data[16 /* C17 */] <-0.023705166f ? 
                        -0.017987706f : 
                        0.0044082548f) : 
                     (data[27 /* C28 */] <0.041246943f ? 
                        0.027725777f : 
                        0.00947957f)) : 
                 (Double.isNaN(data[48]) || data[48 /* C49 */] <0.09456669f ? 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.083269194f ? 
                        -0.019597428f : 
                        0.0037551825f) : 
                     (data[65 /* C66 */] <-0.12744647f ? 
                        -0.004367551f : 
                        0.023744777f))) : 
             (data[31 /* C32 */] <-0.18717797f ? 
                 (data[18 /* C19 */] <0.23325375f ? 
                     (data[5 /* C6 */] <-0.22698708f ? 
                        0.056517243f : 
                        0.007835586f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.10830991f ? 
                        -0.027251719f : 
                        0.022740718f)) : 
                 (Double.isNaN(data[82]) || data[82 /* C83 */] <0.15099718f ? 
                     (data[25 /* C26 */] <-0.062243134f ? 
                        0.0076091494f : 
                        0.03077095f) : 
                     (data[79 /* C80 */] <-0.090124525f ? 
                        0.0155990785f : 
                        -0.0063966583f)))) : 
         (Double.isNaN(data[4]) || data[4 /* C5 */] <0.1744388f ? 
             (data[58 /* C59 */] <0.04461338f ? 
                 (Double.isNaN(data[97]) || data[97 /* C98 */] <0.012851551f ? 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <0.058396578f ? 
                        -0.008552554f : 
                        -0.028652333f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.092075296f ? 
                        -0.043886453f : 
                        -0.012835353f)) : 
                 (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.006621558f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.10553657f ? 
                        -0.022473196f : 
                        -0.0010307138f) : 
                     (data[0 /* C1 */] <-0.046789095f ? 
                        0.01680093f : 
                        -0.0051732482f))) : 
             (Double.isNaN(data[34]) || data[34 /* C35 */] <0.0689389f ? 
                 (data[42 /* C43 */] <-0.13750711f ? 
                     (Double.isNaN(data[84]) || data[84 /* C85 */] <0.055883408f ? 
                        0.02047994f : 
                        -0.054321103f) : 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.06629102f ? 
                        0.03812038f : 
                        0.0719806f)) : 
                 (Double.isNaN(data[64]) || data[64 /* C65 */] <-0.055683643f ? 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.17262152f ? 
                        -0.033117153f : 
                        0.009791885f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.21342847f ? 
                        0.006947036f : 
                        0.069417864f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_31_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <0.04369274f ? 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <0.02662547f ? 
             (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.04487163f ? 
                 (data[13 /* C14 */] <-0.117381126f ? 
                     (data[28 /* C29 */] <-0.1264394f ? 
                        -0.043136798f : 
                        -0.004259032f) : 
                     (data[82 /* C83 */] <0.041733492f ? 
                        0.022699557f : 
                        0.0039385157f)) : 
                 (data[95 /* C96 */] <-0.07339585f ? 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.056036174f ? 
                        0.0052341768f : 
                        -0.016925585f) : 
                     (data[60 /* C61 */] <-0.15975483f ? 
                        -0.0026111682f : 
                        -0.025553064f))) : 
             (Double.isNaN(data[11]) || data[11 /* C12 */] <-0.008525721f ? 
                 (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.09224085f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.020106964f ? 
                        0.004544917f : 
                        0.026838435f) : 
                     (data[51 /* C52 */] <0.01655696f ? 
                        0.013505548f : 
                        0.03643989f)) : 
                 (data[50 /* C51 */] <-0.169521f ? 
                     (data[21 /* C22 */] <0.120982945f ? 
                        -0.003342441f : 
                        -0.02543041f) : 
                     (Double.isNaN(data[76]) || data[76 /* C77 */] <0.14147389f ? 
                        5.080843E-4f : 
                        0.023692535f)))) : 
         (data[95 /* C96 */] <-0.09391474f ? 
             (data[56 /* C57 */] <-0.12457331f ? 
                 (data[88 /* C89 */] <-0.2155031f ? 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <0.010477851f ? 
                        0.004857828f : 
                        -0.046606608f) : 
                     (Double.isNaN(data[53]) || data[53 /* C54 */] <0.11357898f ? 
                        0.01963932f : 
                        0.066460684f)) : 
                 (Double.isNaN(data[64]) || data[64 /* C65 */] <0.15349573f ? 
                     (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.12034126f ? 
                        -0.0186195f : 
                        0.0059388424f) : 
                     (data[91 /* C92 */] <-0.15943256f ? 
                        -0.08596463f : 
                        0.07942762f))) : 
             (Double.isNaN(data[19]) || data[19 /* C20 */] <0.058126956f ? 
                 (Double.isNaN(data[71]) || data[71 /* C72 */] <0.16911246f ? 
                     (data[21 /* C22 */] <0.098034844f ? 
                        -0.013165651f : 
                        -0.039248176f) : 
                     (data[68 /* C69 */] <-0.15673845f ? 
                        -0.0069924966f : 
                        -0.05509198f)) : 
                 (Double.isNaN(data[68]) || data[68 /* C69 */] <-2.530045E-4f ? 
                     (data[5 /* C6 */] <-0.23455286f ? 
                        0.052097663f : 
                        0.004059086f) : 
                     (data[60 /* C61 */] <-0.12628807f ? 
                        -0.0014259408f : 
                        -0.046389144f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_32_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[23 /* C24 */] <-0.06267193f ? 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.019194853f ? 
             (Double.isNaN(data[55]) || data[55 /* C56 */] <0.14330803f ? 
                 (data[65 /* C66 */] <-0.13490787f ? 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.1519633f ? 
                        0.0072107846f : 
                        -0.015186843f) : 
                     (data[48 /* C49 */] <-0.019364983f ? 
                        -0.00230744f : 
                        0.025151378f)) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] <0.07850894f ? 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.06308273f ? 
                        0.04087618f : 
                        0.021502547f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.07417336f ? 
                        -0.003716866f : 
                        0.037401658f))) : 
             (Double.isNaN(data[48]) || data[48 /* C49 */] <0.23861136f ? 
                 (data[76 /* C77 */] <0.055269636f ? 
                     (data[68 /* C69 */] <-0.018345397f ? 
                        -0.009656576f : 
                        -0.04223367f) : 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.13129506f ? 
                        -0.010223799f : 
                        0.026462827f)) : 
                 (Double.isNaN(data[67]) || data[67 /* C68 */] <-0.049262565f ? 
                     (data[29 /* C30 */] <0.057128616f ? 
                        0.013441036f : 
                        0.08546173f) : 
                     (Double.isNaN(data[76]) || data[76 /* C77 */] <0.24658489f ? 
                        -0.015242596f : 
                        0.07268188f)))) : 
         (data[58 /* C59 */] <0.02976985f ? 
             (Double.isNaN(data[4]) || data[4 /* C5 */] <0.15180242f ? 
                 (Double.isNaN(data[97]) || data[97 /* C98 */] <0.027615234f ? 
                     (data[56 /* C57 */] <-0.07674013f ? 
                        0.0019102299f : 
                        -0.0170831f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.018728465f ? 
                        -0.023120964f : 
                        -0.052862946f)) : 
                 (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.030486444f ? 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.2115008f ? 
                        0.005089792f : 
                        0.03342559f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.21663484f ? 
                        -0.037584346f : 
                        0.026732612f))) : 
             (data[28 /* C29 */] <-0.0687911f ? 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.07648748f ? 
                     (Double.isNaN(data[72]) || data[72 /* C73 */] <0.11079168f ? 
                        -0.027056025f : 
                        0.0017431332f) : 
                     (data[42 /* C43 */] <-0.13218853f ? 
                        -0.017785393f : 
                        0.025431588f)) : 
                 (data[8 /* C9 */] <-0.18041563f ? 
                     (data[1 /* C2 */] <-0.29216868f ? 
                        -0.03496498f : 
                        -0.008484129f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.081444815f ? 
                        -1.2484253E-4f : 
                        0.01662833f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_33_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[95 /* C96 */] <-0.13354383f ? 
         (Double.isNaN(data[34]) || data[34 /* C35 */] <0.026523838f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] <0.02392811f ? 
                 (data[88 /* C89 */] <-0.16168478f ? 
                     (data[29 /* C30 */] <0.04861079f ? 
                        -0.0035097525f : 
                        0.024748666f) : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <0.07384183f ? 
                        0.04464551f : 
                        0.01318563f)) : 
                 (data[70 /* C71 */] <-0.114180684f ? 
                     (Double.isNaN(data[10]) || data[10 /* C11 */] <0.06570555f ? 
                        0.023752136f : 
                        0.088167444f) : 
                     (data[50 /* C51 */] <-0.24673787f ? 
                        -0.01948453f : 
                        0.00898665f))) : 
             (Double.isNaN(data[45]) || data[45 /* C46 */] <0.03565165f ? 
                 (data[51 /* C52 */] <0.064600356f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <-0.004552316f ? 
                        -0.027058093f : 
                        0.0014077178f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.19022821f ? 
                        4.960551E-4f : 
                        0.054023422f)) : 
                 (Double.isNaN(data[56]) || data[56 /* C57 */] <0.21454601f ? 
                     (Double.isNaN(data[31]) || data[31 /* C32 */] <0.042363778f ? 
                        0.006264364f : 
                        0.035022985f) : 
                     (Double.isNaN(data[81]) || data[81 /* C82 */] <0.0069128647f ? 
                        0.08886016f : 
                        3.5792758E-4f)))) : 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.09636838f ? 
             (data[42 /* C43 */] <-0.13716982f ? 
                 (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.011908306f ? 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.031832047f ? 
                        -0.028156482f : 
                        -0.0024264434f) : 
                     (data[87 /* C88 */] <-0.078090735f ? 
                        -0.013028695f : 
                        0.012097351f)) : 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.08928534f ? 
                     (data[55 /* C56 */] <0.10108608f ? 
                        -0.0077254265f : 
                        0.008635635f) : 
                     (Double.isNaN(data[79]) || data[79 /* C80 */] <-0.048551247f ? 
                        0.03345446f : 
                        0.01208111f))) : 
             (data[68 /* C69 */] <-0.08900598f ? 
                 (Double.isNaN(data[48]) || data[48 /* C49 */] <0.12016391f ? 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.059679747f ? 
                        -0.008556684f : 
                        0.0136946635f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.29096523f ? 
                        0.01763273f : 
                        0.05958055f)) : 
                 (Double.isNaN(data[38]) || data[38 /* C39 */] <0.119940355f ? 
                     (Double.isNaN(data[82]) || data[82 /* C83 */] <0.15566309f ? 
                        -0.019961061f : 
                        -0.037314873f) : 
                     (data[95 /* C96 */] <-0.04606354f ? 
                        0.0017081763f : 
                        -0.017477069f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_34_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[54]) || data[54 /* C55 */] <0.09031749f ? 
         (data[16 /* C17 */] <-0.02928178f ? 
             (data[20 /* C21 */] <-0.025976002f ? 
                 (Double.isNaN(data[21]) || data[21 /* C22 */] <0.14710645f ? 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.03615205f ? 
                        -0.0074245683f : 
                        0.015674207f) : 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.11305081f ? 
                        -0.038732145f : 
                        -0.008421657f)) : 
                 (Double.isNaN(data[25]) || data[25 /* C26 */] <0.10420886f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.09186225f ? 
                        -0.02773293f : 
                        -0.054008894f) : 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.19354963f ? 
                        -0.0109214615f : 
                        0.031233214f))) : 
             (data[55 /* C56 */] <0.05580893f ? 
                 (data[29 /* C30 */] <0.054076444f ? 
                     (data[97 /* C98 */] <-0.003473673f ? 
                        -0.015319571f : 
                        -0.047143243f) : 
                     (data[71 /* C72 */] <0.095375955f ? 
                        0.006969034f : 
                        -0.015694374f)) : 
                 (data[3 /* C4 */] <-0.029702574f ? 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.015718639f ? 
                        0.019461472f : 
                        -0.0045994557f) : 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.22841868f ? 
                        0.0062207766f : 
                        -0.010268951f)))) : 
         (data[25 /* C26 */] <-0.050209805f ? 
             (Double.isNaN(data[48]) || data[48 /* C49 */] <0.071561486f ? 
                 (Double.isNaN(data[7]) || data[7 /* C8 */] <0.08175115f ? 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.06839159f ? 
                        -0.00820786f : 
                        0.011140044f) : 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.22786985f ? 
                        -0.013940721f : 
                        -0.0410658f)) : 
                 (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.108852305f ? 
                     (data[70 /* C71 */] <-0.21865402f ? 
                        0.035145376f : 
                        -0.0029691104f) : 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <0.07993838f ? 
                        0.018723622f : 
                        0.04870632f))) : 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.03646415f ? 
                 (Double.isNaN(data[71]) || data[71 /* C72 */] <0.18415403f ? 
                     (data[82 /* C83 */] <0.11613259f ? 
                        0.02237709f : 
                        0.003516338f) : 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.0629876f ? 
                        -0.023067195f : 
                        0.007627973f)) : 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.15237054f ? 
                     (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.017750913f ? 
                        0.020259598f : 
                        -0.0068361172f) : 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.10251757f ? 
                        0.026077598f : 
                        0.056008924f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_35_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[38]) || data[38 /* C39 */] <0.15124503f ? 
         (data[54 /* C55 */] <0.0010209547f ? 
             (data[60 /* C61 */] <-0.17103653f ? 
                 (data[61 /* C62 */] <-0.19585915f ? 
                     (Double.isNaN(data[26]) || data[26 /* C27 */] <0.17828526f ? 
                        -0.032280233f : 
                        -0.117468484f) : 
                     (data[30 /* C31 */] <-0.03204823f ? 
                        -0.015727216f : 
                        0.012855747f)) : 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.10788934f ? 
                     (data[28 /* C29 */] <-0.06890679f ? 
                        -0.038966138f : 
                        -0.01663053f) : 
                     (Double.isNaN(data[37]) || data[37 /* C38 */] <0.17527951f ? 
                        -0.0017233458f : 
                        0.09149752f))) : 
             (data[71 /* C72 */] <0.059489187f ? 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.20986803f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.07518679f ? 
                        0.012225863f : 
                        0.035229404f) : 
                     (Double.isNaN(data[49]) || data[49 /* C50 */] <0.22116691f ? 
                        -0.015224598f : 
                        -0.06968958f)) : 
                 (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.07068665f ? 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.03291607f ? 
                        -0.0056846715f : 
                        0.012464141f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.037171073f ? 
                        -0.0028851782f : 
                        -0.021730104f)))) : 
         (data[19 /* C20 */] <-0.135161f ? 
             (data[69 /* C70 */] <-0.16387874f ? 
                 (Double.isNaN(data[64]) || data[64 /* C65 */] <0.1693332f ? 
                     (data[95 /* C96 */] <-0.081557214f ? 
                        0.042131536f : 
                        0.0119927535f) : 
                     (Double.isNaN(data[4]) || data[4 /* C5 */] <-0.015521534f ? 
                        0.10589213f : 
                        0.029296882f)) : 
                 (Double.isNaN(data[58]) || data[58 /* C59 */] <0.15485057f ? 
                     (data[14 /* C15 */] <-0.21832998f ? 
                        -0.02380766f : 
                        -0.0018661657f) : 
                     (Double.isNaN(data[49]) || data[49 /* C50 */] <0.2567766f ? 
                        0.017060949f : 
                        -0.033737473f))) : 
             (Double.isNaN(data[74]) || data[74 /* C75 */] <0.24150327f ? 
                 (data[65 /* C66 */] <-0.1327875f ? 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.039958723f ? 
                        0.016846824f : 
                        -0.0075976024f) : 
                     (Double.isNaN(data[90]) || data[90 /* C91 */] <0.14157116f ? 
                        0.03704107f : 
                        0.0132137025f)) : 
                 (Double.isNaN(data[31]) || data[31 /* C32 */] <-0.019848164f ? 
                     (data[53 /* C54 */] <0.029226031f ? 
                        0.0026519382f : 
                        -0.047271997f) : 
                     (data[68 /* C69 */] <-0.037989266f ? 
                        0.047352135f : 
                        0.0032789072f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_36_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[61 /* C62 */] <-0.044587508f ? 
         (data[71 /* C72 */] <0.0555261f ? 
             (data[19 /* C20 */] <-0.16839032f ? 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.2509149f ? 
                     (data[92 /* C93 */] <-0.025763039f ? 
                        -6.3818786E-4f : 
                        -0.030873511f) : 
                     (Double.isNaN(data[9]) || data[9 /* C10 */] <0.2975233f ? 
                        0.03516035f : 
                        0.14916052f)) : 
                 (Double.isNaN(data[27]) || data[27 /* C28 */] <0.27314854f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.08044194f ? 
                        0.008184267f : 
                        0.03233257f) : 
                     (data[23 /* C24 */] <-0.063365795f ? 
                        0.03669155f : 
                        -0.064828336f))) : 
             (Double.isNaN(data[97]) || data[97 /* C98 */] <0.024806645f ? 
                 (Double.isNaN(data[48]) || data[48 /* C49 */] <0.12930056f ? 
                     (Double.isNaN(data[93]) || data[93 /* C94 */] <0.05721781f ? 
                        -0.0029228039f : 
                        -0.021276161f) : 
                     (data[21 /* C22 */] <0.056054864f ? 
                        0.034408715f : 
                        0.0027761627f)) : 
                 (Double.isNaN(data[69]) || data[69 /* C70 */] <0.04606951f ? 
                     (data[7 /* C8 */] <-0.04111454f ? 
                        0.0020703305f : 
                        -0.026956355f) : 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.17185465f ? 
                        -0.052054297f : 
                        -0.008849611f)))) : 
         (data[31 /* C32 */] <-0.17517321f ? 
             (data[18 /* C19 */] <0.22715072f ? 
                 (data[47 /* C48 */] <-0.026742607f ? 
                     (Double.isNaN(data[58]) || data[58 /* C59 */] <0.1128268f ? 
                        0.010772621f : 
                        0.036951043f) : 
                     (data[23 /* C24 */] <-0.14854994f ? 
                        0.03137974f : 
                        -0.012038709f)) : 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.07840754f ? 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.1441061f ? 
                        -0.031653896f : 
                        0.018604325f) : 
                     (data[7 /* C8 */] <0.07842081f ? 
                        0.020521874f : 
                        -0.014130181f))) : 
             (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.13760792f ? 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.11806962f ? 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <-0.06082094f ? 
                        0.003494804f : 
                        -0.015222678f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.19539577f ? 
                        0.008516893f : 
                        0.05655195f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <0.034154914f ? 
                     (data[11 /* C12 */] <-0.078423634f ? 
                        0.025659004f : 
                        0.008665969f) : 
                     (Double.isNaN(data[23]) || data[23 /* C24 */] <0.014900254f ? 
                        0.0018773578f : 
                        -0.020946719f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_37_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.053281702f ? 
         (data[51 /* C52 */] <0.012587687f ? 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <0.037075214f ? 
                 (data[71 /* C72 */] <0.070520885f ? 
                     (data[17 /* C18 */] <-0.039416697f ? 
                        -0.018760864f : 
                        0.0066005774f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.017233687f ? 
                        -0.017020669f : 
                        -0.038274005f)) : 
                 (Double.isNaN(data[53]) || data[53 /* C54 */] <0.15961294f ? 
                     (data[4 /* C5 */] <-0.023152225f ? 
                        -0.008981664f : 
                        0.015154228f) : 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <0.24929178f ? 
                        0.04650052f : 
                        -0.079686575f))) : 
             (data[94 /* C95 */] <-0.08677748f ? 
                 (Double.isNaN(data[74]) || data[74 /* C75 */] <0.19465496f ? 
                     (data[65 /* C66 */] <-0.13353944f ? 
                        0.00448655f : 
                        0.02165801f) : 
                     (Double.isNaN(data[67]) || data[67 /* C68 */] <0.057360113f ? 
                        -0.002471253f : 
                        -0.041669965f)) : 
                 (Double.isNaN(data[69]) || data[69 /* C70 */] <-0.004396287f ? 
                     (data[31 /* C32 */] <-0.17133205f ? 
                        -0.015475629f : 
                        0.0065258583f) : 
                     (data[14 /* C15 */] <-0.18097863f ? 
                        -0.028675402f : 
                        -0.0057912925f)))) : 
         (Double.isNaN(data[27]) || data[27 /* C28 */] <0.15570615f ? 
             (data[61 /* C62 */] <-0.09742217f ? 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.17414087f ? 
                     (data[67 /* C68 */] <-0.21702734f ? 
                        -0.063957885f : 
                        -0.010381203f) : 
                     (data[87 /* C88 */] <-0.13912866f ? 
                        -0.008163476f : 
                        0.030614652f)) : 
                 (Double.isNaN(data[62]) || data[62 /* C63 */] <0.07665288f ? 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.030512333f ? 
                        0.017706845f : 
                        -4.7168694E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.05532841f ? 
                        0.035722826f : 
                        0.016986012f))) : 
             (Double.isNaN(data[64]) || data[64 /* C65 */] <-0.059261747f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] <0.052643616f ? 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.06399954f ? 
                        -0.01769811f : 
                        0.013703498f) : 
                     (Double.isNaN(data[17]) || data[17 /* C18 */] <0.021352557f ? 
                        -0.041460235f : 
                        -0.003640113f)) : 
                 (Double.isNaN(data[9]) || data[9 /* C10 */] <-0.081406705f ? 
                     (Double.isNaN(data[99]) || data[99 /* C100 */] <-0.13393861f ? 
                        0.0064787217f : 
                        -0.03674388f) : 
                     (Double.isNaN(data[15]) || data[15 /* C16 */] <-0.09797276f ? 
                        0.03656181f : 
                        -0.006498894f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_38_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.0014554164f ? 
         (data[94 /* C95 */] <-0.16736203f ? 
             (Double.isNaN(data[91]) || data[91 /* C92 */] <0.14448754f ? 
                 (data[94 /* C95 */] <-0.23577519f ? 
                     (Double.isNaN(data[41]) || data[41 /* C42 */] <0.32173756f ? 
                        0.043659016f : 
                        -0.08639256f) : 
                     (data[51 /* C52 */] <-0.015419136f ? 
                        -0.0024746272f : 
                        0.020458475f)) : 
                 (Double.isNaN(data[36]) || data[36 /* C37 */] <0.36909187f ? 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.1562694f ? 
                        0.009172604f : 
                        -0.023570165f) : 
                     (data[11 /* C12 */] <-0.16014588f ? 
                        0.08648258f : 
                        -0.13557966f))) : 
             (Double.isNaN(data[69]) || data[69 /* C70 */] <-0.073197536f ? 
                 (data[27 /* C28 */] <0.08178572f ? 
                     (data[7 /* C8 */] <0.043136567f ? 
                        0.025608867f : 
                        0.0058049867f) : 
                     (data[17 /* C18 */] <-0.060447484f ? 
                        -0.018587114f : 
                        0.0035639168f)) : 
                 (data[28 /* C29 */] <-0.09835249f ? 
                     (Double.isNaN(data[46]) || data[46 /* C47 */] <-0.09998092f ? 
                        -0.03515145f : 
                        -0.0065191514f) : 
                     (data[58 /* C59 */] <0.07067478f ? 
                        -0.0147659425f : 
                        0.002926944f)))) : 
         (Double.isNaN(data[89]) || data[89 /* C90 */] <0.028363805f ? 
             (Double.isNaN(data[23]) || data[23 /* C24 */] <0.0987156f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] <0.06707045f ? 
                     (Double.isNaN(data[74]) || data[74 /* C75 */] <0.23250648f ? 
                        0.014400677f : 
                        -0.00832887f) : 
                     (data[20 /* C21 */] <-0.12196771f ? 
                        0.019368928f : 
                        -0.012478848f)) : 
                 (Double.isNaN(data[74]) || data[74 /* C75 */] <0.24266659f ? 
                     (data[7 /* C8 */] <-0.2181763f ? 
                        0.08035569f : 
                        -0.013942542f) : 
                     (Double.isNaN(data[85]) || data[85 /* C86 */] <0.29531065f ? 
                        -0.061055213f : 
                        0.011886508f))) : 
             (data[25 /* C26 */] <-0.033798523f ? 
                 (Double.isNaN(data[90]) || data[90 /* C91 */] <0.10858403f ? 
                     (data[31 /* C32 */] <-0.19748563f ? 
                        -0.018984403f : 
                        0.023291992f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.057813123f ? 
                        0.004145637f : 
                        -0.031451073f)) : 
                 (data[55 /* C56 */] <0.10788369f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.2188141f ? 
                        0.009654748f : 
                        0.046203863f) : 
                     (data[10 /* C11 */] <-0.2789737f ? 
                        0.079725176f : 
                        0.03849349f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_39_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* C57 */] <-0.056948356f ? 
         (data[60 /* C61 */] <-0.13495515f ? 
             (data[42 /* C43 */] <-0.2139912f ? 
                 (data[49 /* C50 */] <0.01640105f ? 
                     (data[75 /* C76 */] <-0.13604362f ? 
                        0.0051391353f : 
                        -0.063943274f) : 
                     (data[66 /* C67 */] <-0.3060022f ? 
                        -0.047362924f : 
                        0.0068349745f)) : 
                 (data[38 /* C39 */] <0.028452126f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.069431916f ? 
                        -8.065588E-4f : 
                        0.024594745f) : 
                     (data[10 /* C11 */] <-0.13829371f ? 
                        0.038787074f : 
                        0.01982139f))) : 
             (data[38 /* C39 */] <0.043915134f ? 
                 (data[95 /* C96 */] <-0.186072f ? 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.30308932f ? 
                        0.007950721f : 
                        0.14016621f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <0.007249252f ? 
                        -0.008706918f : 
                        -0.030984795f)) : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] <-0.0036956668f ? 
                     (data[32 /* C33 */] <-0.0034727938f ? 
                        0.027135856f : 
                        0.009533461f) : 
                     (data[27 /* C28 */] <0.01428677f ? 
                        0.01625119f : 
                        -0.0049446f)))) : 
         (data[83 /* C84 */] <0.122140765f ? 
             (data[81 /* C82 */] <-0.064481065f ? 
                 (data[87 /* C88 */] <-0.06828718f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.11094844f ? 
                        -0.021708181f : 
                        0.0012669305f) : 
                     (Double.isNaN(data[62]) || data[62 /* C63 */] <0.09672335f ? 
                        0.0012927703f : 
                        0.02371241f)) : 
                 (data[61 /* C62 */] <-0.064848706f ? 
                     (data[14 /* C15 */] <-0.2204268f ? 
                        -0.051570266f : 
                        -0.024523351f) : 
                     (data[16 /* C17 */] <0.017170368f ? 
                        -0.02215371f : 
                        -0.003618848f))) : 
             (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.0837189f ? 
                 (data[8 /* C9 */] <-0.16060992f ? 
                     (Double.isNaN(data[78]) || data[78 /* C79 */] <0.10266414f ? 
                        -0.020835042f : 
                        0.0069700074f) : 
                     (data[7 /* C8 */] <0.026493412f ? 
                        0.013755024f : 
                        -0.0026937388f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <-0.0074270424f ? 
                     (data[48 /* C49 */] <0.04136031f ? 
                        0.010424385f : 
                        0.038566988f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <0.00876217f ? 
                        0.0068779886f : 
                        -0.031500783f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_40_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[23 /* C24 */] <-0.075086355f ? 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.048134927f ? 
             (data[84 /* C85 */] <-0.08468704f ? 
                 (data[76 /* C77 */] <-0.03304843f ? 
                     (Double.isNaN(data[19]) || data[19 /* C20 */] <-0.029484503f ? 
                        -0.042412292f : 
                        -2.2114164E-5f) : 
                     (data[69 /* C70 */] <-0.13579184f ? 
                        0.031746667f : 
                        0.0045548147f)) : 
                 (Double.isNaN(data[49]) || data[49 /* C50 */] <0.07811018f ? 
                     (data[25 /* C26 */] <-0.15520982f ? 
                        -0.005645329f : 
                        0.030377736f) : 
                     (data[17 /* C18 */] <-0.008183021f ? 
                        0.0026098734f : 
                        0.021357398f))) : 
             (Double.isNaN(data[48]) || data[48 /* C49 */] <0.23861136f ? 
                 (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.0032610008f ? 
                     (data[54 /* C55 */] <-0.0045398697f ? 
                        -0.019619554f : 
                        0.0107295625f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.13057369f ? 
                        -0.011783685f : 
                        -0.045799624f)) : 
                 (Double.isNaN(data[67]) || data[67 /* C68 */] <-0.035963695f ? 
                     (Double.isNaN(data[75]) || data[75 /* C76 */] <0.28672254f ? 
                        0.06019465f : 
                        0.12208261f) : 
                     (data[95 /* C96 */] <-0.55526996f ? 
                        -0.18853498f : 
                        0.012688033f)))) : 
         (data[58 /* C59 */] <0.008168786f ? 
             (Double.isNaN(data[4]) || data[4 /* C5 */] <0.15180242f ? 
                 (Double.isNaN(data[95]) || data[95 /* C96 */] <-0.05195079f ? 
                     (Double.isNaN(data[62]) || data[62 /* C63 */] <0.06825084f ? 
                        -0.016973209f : 
                        -0.0012821845f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.018728465f ? 
                        -0.019792419f : 
                        -0.043125827f)) : 
                 (Double.isNaN(data[5]) || data[5 /* C6 */] <-0.044726796f ? 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <0.042147502f ? 
                        0.015230142f : 
                        0.06948373f) : 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.1837371f ? 
                        -0.020322803f : 
                        0.017598798f))) : 
             (data[3 /* C4 */] <-0.063765824f ? 
                 (Double.isNaN(data[93]) || data[93 /* C94 */] <0.046485227f ? 
                     (Double.isNaN(data[94]) || data[94 /* C95 */] <0.114772856f ? 
                        0.025440933f : 
                        -0.022931013f) : 
                     (data[46 /* C47 */] <-0.1876684f ? 
                        -0.015997523f : 
                        0.008042926f)) : 
                 (data[28 /* C29 */] <-0.082415596f ? 
                     (Double.isNaN(data[46]) || data[46 /* C47 */] <-0.11385423f ? 
                        -0.023284735f : 
                        -2.0686685E-4f) : 
                     (data[8 /* C9 */] <-0.18145165f ? 
                        -0.014250042f : 
                        0.0045463545f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_41_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[54]) || data[54 /* C55 */] <0.1142362f ? 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.09636838f ? 
             (Double.isNaN(data[30]) || data[30 /* C31 */] <0.055817053f ? 
                 (data[16 /* C17 */] <-0.033535283f ? 
                     (data[95 /* C96 */] <-0.111396655f ? 
                        5.1740155E-4f : 
                        -0.02306087f) : 
                     (Double.isNaN(data[9]) || data[9 /* C10 */] <-0.08497542f ? 
                        -0.004247709f : 
                        0.0095007755f)) : 
                 (data[7 /* C8 */] <-0.0018640012f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] <0.08055363f ? 
                        0.016667916f : 
                        0.035556994f) : 
                     (data[46 /* C47 */] <-0.1774632f ? 
                        -0.009688068f : 
                        0.012741994f))) : 
             (Double.isNaN(data[16]) || data[16 /* C17 */] <0.052778326f ? 
                 (data[68 /* C69 */] <-0.0478583f ? 
                     (data[83 /* C84 */] <0.029118005f ? 
                        -0.028001113f : 
                        -0.00559646f) : 
                     (data[82 /* C83 */] <0.060810417f ? 
                        -0.01602263f : 
                        -0.030883886f)) : 
                 (Double.isNaN(data[48]) || data[48 /* C49 */] <0.11310812f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.12693512f ? 
                        -0.014244597f : 
                        0.0035993455f) : 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.09906717f ? 
                        0.030179571f : 
                        -0.002768192f)))) : 
         (data[58 /* C59 */] <-0.013432278f ? 
             (Double.isNaN(data[42]) || data[42 /* C43 */] <0.132275f ? 
                 (Double.isNaN(data[4]) || data[4 /* C5 */] <0.19669986f ? 
                     (data[51 /* C52 */] <-0.025903402f ? 
                        -0.027358668f : 
                        -0.004569444f) : 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.07839217f ? 
                        0.03364437f : 
                        -0.05552081f)) : 
                 (data[3 /* C4 */] <-0.04619622f ? 
                     (Double.isNaN(data[55]) || data[55 /* C56 */] <0.18667427f ? 
                        -0.03621787f : 
                        0.051912468f) : 
                     (Double.isNaN(data[79]) || data[79 /* C80 */] <-0.04136437f ? 
                        0.065105215f : 
                        0.01209459f))) : 
             (data[90 /* C91 */] <0.09130729f ? 
                 (data[65 /* C66 */] <-0.18917911f ? 
                     (Double.isNaN(data[45]) || data[45 /* C46 */] <0.035275273f ? 
                        8.5464347E-4f : 
                        0.027540565f) : 
                     (data[48 /* C49 */] <0.017707735f ? 
                        0.013521402f : 
                        0.042466596f)) : 
                 (Double.isNaN(data[61]) || data[61 /* C62 */] <0.060084023f ? 
                     (data[49 /* C50 */] <-0.06570013f ? 
                        0.025079694f : 
                        -6.4814324E-4f) : 
                     (data[70 /* C71 */] <-0.08129479f ? 
                        0.03224909f : 
                        0.009390277f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_42_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[42 /* C43 */] <-0.13068646f ? 
         (Double.isNaN(data[51]) || data[51 /* C52 */] <0.14862083f ? 
             (data[17 /* C18 */] <-0.055573102f ? 
                 (Double.isNaN(data[10]) || data[10 /* C11 */] <0.07505126f ? 
                     (Double.isNaN(data[16]) || data[16 /* C17 */] <0.12805372f ? 
                        -0.030425701f : 
                        -0.0067420765f) : 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.17271984f ? 
                        0.014566282f : 
                        0.08638009f)) : 
                 (data[93 /* C94 */] <0.03869829f ? 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <-0.051301017f ? 
                        0.014360172f : 
                        -0.0061103553f) : 
                     (data[22 /* C23 */] <3.4236163E-4f ? 
                        0.017198067f : 
                        -0.01660416f))) : 
             (data[45 /* C46 */] <-0.03299431f ? 
                 (Double.isNaN(data[20]) || data[20 /* C21 */] <0.34170276f ? 
                     (Double.isNaN(data[35]) || data[35 /* C36 */] <0.23609023f ? 
                        0.0032772298f : 
                        -0.05309992f) : 
                     (data[28 /* C29 */] <-0.11904038f ? 
                        0.16264331f : 
                        -0.11964614f)) : 
                 (data[48 /* C49 */] <0.03368357f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.18052766f ? 
                        0.0011877936f : 
                        0.041731633f) : 
                     (data[86 /* C87 */] <-0.06827472f ? 
                        0.033353433f : 
                        0.053383455f)))) : 
         (Double.isNaN(data[4]) || data[4 /* C5 */] <0.08701795f ? 
             (Double.isNaN(data[69]) || data[69 /* C70 */] <0.0055433083f ? 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.15237054f ? 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.1330688f ? 
                        0.0041523664f : 
                        -0.011164092f) : 
                     (Double.isNaN(data[42]) || data[42 /* C43 */] <0.015711538f ? 
                        0.007038532f : 
                        0.025695642f)) : 
                 (data[84 /* C85 */] <-0.08546404f ? 
                     (data[95 /* C96 */] <-0.10660021f ? 
                        -0.0038077303f : 
                        -0.03407571f) : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <-0.0070541045f ? 
                        0.0031224387f : 
                        -0.015752599f))) : 
             (data[71 /* C72 */] <0.12289858f ? 
                 (Double.isNaN(data[22]) || data[22 /* C23 */] <0.24396491f ? 
                     (Double.isNaN(data[34]) || data[34 /* C35 */] <0.101526804f ? 
                        0.032101672f : 
                        0.007914298f) : 
                     (data[70 /* C71 */] <-0.29785538f ? 
                        0.08541732f : 
                        -0.0016930152f)) : 
                 (Double.isNaN(data[93]) || data[93 /* C94 */] <0.047866598f ? 
                     (data[34 /* C35 */] <0.013767177f ? 
                        0.03432359f : 
                        0.007348115f) : 
                     (data[48 /* C49 */] <0.02694833f ? 
                        -0.022448227f : 
                        0.0064855292f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_43_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[71 /* C72 */] <0.089212336f ? 
         (data[54 /* C55 */] <-0.04362731f ? 
             (Double.isNaN(data[87]) || data[87 /* C88 */] <-0.003369987f ? 
                 (data[46 /* C47 */] <-0.28809452f ? 
                     (data[23 /* C24 */] <-0.019460114f ? 
                        -0.013108306f : 
                        -0.057316814f) : 
                     (Double.isNaN(data[18]) || data[18 /* C19 */] <0.38999176f ? 
                        -0.0069954293f : 
                        -0.05742587f)) : 
                 (data[81 /* C82 */] <-0.08847434f ? 
                     (data[0 /* C1 */] <-0.15696514f ? 
                        0.06152122f : 
                        0.01779163f) : 
                     (Double.isNaN(data[61]) || data[61 /* C62 */] <0.0691321f ? 
                        -0.00907095f : 
                        0.022307564f))) : 
             (data[7 /* C8 */] <0.02033563f ? 
                 (data[16 /* C17 */] <0.019698918f ? 
                     (Double.isNaN(data[83]) || data[83 /* C84 */] <0.11253314f ? 
                        -1.0641212E-4f : 
                        0.024045039f) : 
                     (data[42 /* C43 */] <-0.1322015f ? 
                        0.008902692f : 
                        0.031816605f)) : 
                 (Double.isNaN(data[23]) || data[23 /* C24 */] <0.054279357f ? 
                     (data[25 /* C26 */] <-0.0483888f ? 
                        -0.0024409422f : 
                        0.014234004f) : 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.21530843f ? 
                        -0.0064015076f : 
                        -0.037599254f)))) : 
         (Double.isNaN(data[61]) || data[61 /* C62 */] <0.094090395f ? 
             (data[48 /* C49 */] <0.08188395f ? 
                 (data[55 /* C56 */] <0.08826769f ? 
                     (data[93 /* C94 */] <0.059032492f ? 
                        -0.013347479f : 
                        -0.030503338f) : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] <0.017188791f ? 
                        -0.0015211378f : 
                        -0.018607719f)) : 
                 (Double.isNaN(data[46]) || data[46 /* C47 */] <-0.11658141f ? 
                     (data[54 /* C55 */] <0.05486369f ? 
                        -0.019784987f : 
                        0.0028679273f) : 
                     (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.12505578f ? 
                        0.0048406506f : 
                        0.025134591f))) : 
             (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.12381147f ? 
                 (Double.isNaN(data[18]) || data[18 /* C19 */] <0.29579207f ? 
                     (Double.isNaN(data[11]) || data[11 /* C12 */] <0.033110052f ? 
                        0.013248955f : 
                        -0.014661109f) : 
                     (data[4 /* C5 */] <-0.053801667f ? 
                        -0.028029893f : 
                        -2.1830399E-4f)) : 
                 (data[26 /* C27 */] <0.027985368f ? 
                     (Double.isNaN(data[56]) || data[56 /* C57 */] <0.44388095f ? 
                        0.005874822f : 
                        0.23293178f) : 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.22312197f ? 
                        0.033595942f : 
                        -0.052045032f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_44_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[94]) || data[94 /* C95 */] <0.04944878f ? 
         (data[82 /* C83 */] <0.08127062f ? 
             (data[45 /* C46 */] <-0.06988757f ? 
                 (data[69 /* C70 */] <-0.1747513f ? 
                     (Double.isNaN(data[24]) || data[24 /* C25 */] <0.043082856f ? 
                        0.029978843f : 
                        -0.007910816f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.07355978f ? 
                        -7.120093E-4f : 
                        -0.024195984f)) : 
                 (Double.isNaN(data[55]) || data[55 /* C56 */] <0.15613209f ? 
                     (data[61 /* C62 */] <-0.07092581f ? 
                        -0.0086757f : 
                        0.012304287f) : 
                     (data[83 /* C84 */] <0.08593779f ? 
                        0.0113350395f : 
                        0.031232651f))) : 
             (Double.isNaN(data[79]) || data[79 /* C80 */] <-0.0700807f ? 
                 (data[90 /* C91 */] <0.103643656f ? 
                     (data[85 /* C86 */] <0.033436507f ? 
                        -0.0063725365f : 
                        0.019581798f) : 
                     (Double.isNaN(data[30]) || data[30 /* C31 */] <0.046461143f ? 
                        -0.0075418414f : 
                        0.008362645f)) : 
                 (data[69 /* C70 */] <-0.07820299f ? 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.19339593f ? 
                        0.0073194504f : 
                        -0.012648301f) : 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.025492229f ? 
                        -0.0080043385f : 
                        -0.028077645f)))) : 
         (data[95 /* C96 */] <-0.18985885f ? 
             (Double.isNaN(data[88]) || data[88 /* C89 */] <0.010090208f ? 
                 (Double.isNaN(data[30]) || data[30 /* C31 */] <0.27459475f ? 
                     (Double.isNaN(data[56]) || data[56 /* C57 */] <0.2756233f ? 
                        -8.592088E-4f : 
                        0.085061856f) : 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.2091697f ? 
                        0.05287095f : 
                        0.17785847f)) : 
                 (data[13 /* C14 */] <-0.1771857f ? 
                     (data[46 /* C47 */] <-0.22506036f ? 
                        0.093351744f : 
                        -0.017877972f) : 
                     (data[7 /* C8 */] <-0.25321174f ? 
                        0.13169217f : 
                        0.04714091f))) : 
             (data[60 /* C61 */] <-0.2238788f ? 
                 (data[1 /* C2 */] <-0.20733678f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.085157014f ? 
                        0.008549063f : 
                        0.048363186f) : 
                     (Double.isNaN(data[89]) || data[89 /* C90 */] <-0.040611155f ? 
                        -0.028602526f : 
                        0.0076968586f)) : 
                 (Double.isNaN(data[94]) || data[94 /* C95 */] <0.12836963f ? 
                     (Double.isNaN(data[25]) || data[25 /* C26 */] <0.31304923f ? 
                        -0.016902972f : 
                        0.042630903f) : 
                     (Double.isNaN(data[88]) || data[88 /* C89 */] <-5.423138E-4f ? 
                        -0.041812666f : 
                        -0.0057253037f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_45_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[95 /* C96 */] <-0.045942683f ? 
         (Double.isNaN(data[34]) || data[34 /* C35 */] <0.06260778f ? 
             (data[31 /* C32 */] <-0.14154051f ? 
                 (data[22 /* C23 */] <0.06639663f ? 
                     (data[78 /* C79 */] <-0.5401285f ? 
                        -0.16113535f : 
                        0.02127215f) : 
                     (data[53 /* C54 */] <-0.19989233f ? 
                        0.029288715f : 
                        -0.009164423f)) : 
                 (data[3 /* C4 */] <-0.024056366f ? 
                     (data[62 /* C63 */] <0.057195634f ? 
                        0.014349898f : 
                        0.03097401f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <-0.010287765f ? 
                        0.013297047f : 
                        -8.195782E-4f))) : 
             (data[7 /* C8 */] <-0.019970434f ? 
                 (data[54 /* C55 */] <-0.02798684f ? 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.18722133f ? 
                        -0.019898755f : 
                        0.029124234f) : 
                     (data[45 /* C46 */] <-0.027865201f ? 
                        0.0016077394f : 
                        0.023808734f)) : 
                 (data[23 /* C24 */] <-0.059908748f ? 
                     (data[4 /* C5 */] <-0.18537708f ? 
                        0.05087962f : 
                        0.0027371983f) : 
                     (Double.isNaN(data[51]) || data[51 /* C52 */] <0.080604255f ? 
                        -0.021097435f : 
                        -0.006322765f)))) : 
         (data[60 /* C61 */] <-0.1831886f ? 
             (data[42 /* C43 */] <-0.20700482f ? 
                 (Double.isNaN(data[32]) || data[32 /* C33 */] <0.1429942f ? 
                     (data[46 /* C47 */] <-0.2258549f ? 
                        -0.04642653f : 
                        -0.0073758597f) : 
                     (Double.isNaN(data[72]) || data[72 /* C73 */] <0.10770973f ? 
                        0.03488344f : 
                        -0.017190868f)) : 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.06390633f ? 
                     (Double.isNaN(data[71]) || data[71 /* C72 */] <0.16351317f ? 
                        0.01419294f : 
                        -0.0088642845f) : 
                     (data[74 /* C75 */] <0.059747316f ? 
                        0.04616267f : 
                        0.024111513f))) : 
             (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.09794902f ? 
                 (data[94 /* C95 */] <-0.1634664f ? 
                     (data[44 /* C45 */] <-0.21517445f ? 
                        -0.06756565f : 
                        0.02702332f) : 
                     (Double.isNaN(data[80]) || data[80 /* C81 */] <0.0433747f ? 
                        -0.004771478f : 
                        0.012137408f)) : 
                 (data[58 /* C59 */] <0.05910416f ? 
                     (Double.isNaN(data[16]) || data[16 /* C17 */] <0.08316322f ? 
                        -0.028732894f : 
                        -0.00984579f) : 
                     (data[19 /* C20 */] <-0.09207531f ? 
                        -0.017061371f : 
                        -1.2184652E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_46_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[23 /* C24 */] <-0.10405335f ? 
         (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.024018198f ? 
             (data[55 /* C56 */] <0.09735467f ? 
                 (data[76 /* C77 */] <0.09572421f ? 
                     (data[16 /* C17 */] <0.017324671f ? 
                        -0.01591955f : 
                        0.007972682f) : 
                     (data[69 /* C70 */] <-0.0801265f ? 
                        0.034103636f : 
                        0.0093188f)) : 
                 (data[84 /* C85 */] <-0.30582926f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] <0.2514995f ? 
                        0.0033875254f : 
                        -0.08270812f) : 
                     (data[82 /* C83 */] <0.08623654f ? 
                        0.037896175f : 
                        0.018924741f))) : 
             (Double.isNaN(data[48]) || data[48 /* C49 */] <0.23861136f ? 
                 (Double.isNaN(data[54]) || data[54 /* C55 */] <0.15908504f ? 
                     (data[5 /* C6 */] <-0.24644075f ? 
                        0.028828632f : 
                        -0.020217061f) : 
                     (data[47 /* C48 */] <0.040687006f ? 
                        0.03267348f : 
                        -0.0050018984f)) : 
                 (data[76 /* C77 */] <-0.21058534f ? 
                     (Double.isNaN(data[29]) || data[29 /* C30 */] <0.23589614f ? 
                        0.09833316f : 
                        0.26729456f) : 
                     (Double.isNaN(data[9]) || data[9 /* C10 */] <-0.055227928f ? 
                        0.014547496f : 
                        0.073563695f)))) : 
         (data[28 /* C29 */] <-0.08017134f ? 
             (Double.isNaN(data[46]) || data[46 /* C47 */] <-0.09589133f ? 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.0726019f ? 
                     (data[69 /* C70 */] <-0.03334744f ? 
                        -0.0140574165f : 
                        -0.031651914f) : 
                     (Double.isNaN(data[57]) || data[57 /* C58 */] <-0.054942824f ? 
                        -0.00848173f : 
                        0.020344444f)) : 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <-0.018023152f ? 
                     (data[22 /* C23 */] <0.09566789f ? 
                        0.011009708f : 
                        -0.01319156f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <0.023214772f ? 
                        0.023875676f : 
                        -0.0035822156f))) : 
             (data[8 /* C9 */] <-0.16159423f ? 
                 (Double.isNaN(data[97]) || data[97 /* C98 */] <0.04855931f ? 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.0037110504f ? 
                        -0.0017107798f : 
                        -0.021252679f) : 
                     (data[82 /* C83 */] <0.077159345f ? 
                        -0.0032801745f : 
                        -0.030266637f)) : 
                 (Double.isNaN(data[58]) || data[58 /* C59 */] <0.06903189f ? 
                     (data[83 /* C84 */] <0.10879667f ? 
                        -0.0069715315f : 
                        0.0042062495f) : 
                     (Double.isNaN(data[7]) || data[7 /* C8 */] <0.09912774f ? 
                        0.014124252f : 
                        -0.0064042555f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_47_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* C57 */] <-0.106822975f ? 
         (Double.isNaN(data[88]) || data[88 /* C89 */] <-0.08351079f ? 
             (Double.isNaN(data[16]) || data[16 /* C17 */] <0.050989214f ? 
                 (data[40 /* C41 */] <-0.16872685f ? 
                     (Double.isNaN(data[21]) || data[21 /* C22 */] <0.10454825f ? 
                        -0.013282151f : 
                        -0.04114778f) : 
                     (data[71 /* C72 */] <0.09529793f ? 
                        0.017700609f : 
                        -0.0047887387f)) : 
                 (data[71 /* C72 */] <0.15148906f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.08525684f ? 
                        0.028590752f : 
                        -0.004778815f) : 
                     (data[26 /* C27 */] <-0.15565328f ? 
                        0.10580057f : 
                        0.00392391f))) : 
             (Double.isNaN(data[70]) || data[70 /* C71 */] <-0.09485406f ? 
                 (Double.isNaN(data[69]) || data[69 /* C70 */] <0.099776134f ? 
                     (data[74 /* C75 */] <0.027893651f ? 
                        0.0561114f : 
                        0.028223455f) : 
                     (data[32 /* C33 */] <-0.14040978f ? 
                        0.088340305f : 
                        -0.004871018f)) : 
                 (Double.isNaN(data[21]) || data[21 /* C22 */] <0.33724794f ? 
                     (Double.isNaN(data[36]) || data[36 /* C37 */] <0.36577678f ? 
                        0.0129730385f : 
                        -0.09524418f) : 
                     (data[7 /* C8 */] <0.041322667f ? 
                        0.03727154f : 
                        -0.058961514f)))) : 
         (Double.isNaN(data[94]) || data[94 /* C95 */] <0.04369274f ? 
             (Double.isNaN(data[83]) || data[83 /* C84 */] <0.11166351f ? 
                 (data[55 /* C56 */] <0.07939971f ? 
                     (data[94 /* C95 */] <-0.19499965f ? 
                        0.014124448f : 
                        -0.016900614f) : 
                     (data[16 /* C17 */] <-0.039785773f ? 
                        -0.017229162f : 
                        0.0023427287f)) : 
                 (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.07353769f ? 
                     (data[8 /* C9 */] <-0.15891576f ? 
                        -0.009988914f : 
                        0.0053739855f) : 
                     (data[48 /* C49 */] <0.019783948f ? 
                        0.0062729376f : 
                        0.028309818f))) : 
             (data[60 /* C61 */] <-0.22659871f ? 
                 (data[69 /* C70 */] <-0.32466567f ? 
                     (Double.isNaN(data[86]) || data[86 /* C87 */] <0.109885454f ? 
                        0.040065583f : 
                        0.14258367f) : 
                     (Double.isNaN(data[89]) || data[89 /* C90 */] <0.0073080864f ? 
                        -0.010187577f : 
                        0.027732076f)) : 
                 (Double.isNaN(data[87]) || data[87 /* C88 */] <-0.027530879f ? 
                     (Double.isNaN(data[79]) || data[79 /* C80 */] <0.0065405043f ? 
                        -0.030943176f : 
                        -0.008143385f) : 
                     (Double.isNaN(data[76]) || data[76 /* C77 */] <0.30995288f ? 
                        -0.0098450845f : 
                        0.05083683f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_embeddings_hex_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_48_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[54 /* C55 */] <0.024939667f ? 
         (Double.isNaN(data[30]) || data[30 /* C31 */] <0.09110979f ? 
             (Double.isNaN(data[87]) || data[87 /* C88 */] <-0.06950147f ? 
                 (data[94 /* C95 */] <-0.15517707f ? 
                     (data[55 /* C56 */] <0.05069839f ? 
                        -0.011504566f : 
                        0.019578673f) : 
                     (data[19 /* C20 */] <-0.08741255f ? 
                        -0.029905325f : 
                        -0.011280464f)) : 
                 (data[71 /* C72 */] <0.04502514f ? 
                     (data[16 /* C17 */] <-0.031021623f ? 
                        -0.00885037f : 
                        0.015587312f) : 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <-0.009572355f ? 
                        -0.013694735f : 
                        0.0021619406f))) : 
             (data[46 /* C47 */] <-0.25409403f ? 
                 (Double.isNaN(data[42]) || data[42 /* C43 */] <0.54522955f ? 
                     (Double.isNaN(data[45]) || data[45 /* C46 */] <0.047906134f ? 
                        -0.03159889f : 
                        0.0050702305f) : 
                    -0.19560082f) : 
                 (Double.isNaN(data[37]) || data[37 /* C38 */] <0.14409411f ? 
                     (Double.isNaN(data[36]) || data[36 /* C37 */] <0.21250546f ? 
                        0.010666951f : 
                        -0.05154705f) : 
                     (data[28 /* C29 */] <-0.052402467f ? 
                        0.08290351f : 
                        0.0152930245f)))) : 
         (data[71 /* C72 */] <0.111009315f ? 
             (data[42 /* C43 */] <-0.20192772f ? 
                 (data[76 /* C77 */] <-0.090660386f ? 
                     (Double.isNaN(data[91]) || data[91 /* C92 */] <0.52294564f ? 
                        -0.052151024f : 
                        0.15722704f) : 
                     (data[0 /* C1 */] <-0.017126743f ? 
                        0.0061737048f : 
                        -0.018594258f)) : 
                 (Double.isNaN(data[90]) || data[90 /* C91 */] <0.15699306f ? 
                     (Double.isNaN(data[76]) || data[76 /* C77 */] <0.13882451f ? 
                        0.013967201f : 
                        0.031380948f) : 
                     (Double.isNaN(data[69]) || data[69 /* C70 */] <-0.035855237f ? 
                        0.013772398f : 
                        -0.0036999343f))) : 
             (Double.isNaN(data[48]) || data[48 /* C49 */] <0.09962018f ? 
                 (Double.isNaN(data[51]) || data[51 /* C52 */] <0.1382068f ? 
                     (data[42 /* C43 */] <0.011016537f ? 
                        -0.012831915f : 
                        0.0036078675f) : 
                     (data[15 /* C16 */] <-0.21877001f ? 
                        -0.0076234653f : 
                        0.015309115f)) : 
                 (Double.isNaN(data[65]) || data[65 /* C66 */] <-0.067674935f ? 
                     (Double.isNaN(data[54]) || data[54 /* C55 */] <0.1618836f ? 
                        -8.065485E-4f : 
                        0.019305417f) : 
                     (Double.isNaN(data[38]) || data[38 /* C39 */] <0.10168258f ? 
                        0.027364373f : 
                        0.049078f)))));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 30, static init size = 0B
}


class gbm_embeddings_hex_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_embeddings_hex_Tree_49_class_0.score0(fdata);
  }
}
class gbm_embeddings_hex_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[60]) || data[60 /* C61 */] <-0.077075f ? 
         (data[56 /* C57 */] <-0.021851402f ? 
             (data[38 /* C39 */] <0.0339929f ? 
                 (data[60 /* C61 */] <-0.22850898f ? 
                     (Double.isNaN(data[97]) || data[97 /* C98 */] <0.06400824f ? 
                        0.025940644f : 
                        -0.0033555483f) : 
                     (Double.isNaN(data[68]) || data[68 /* C69 */] <-0.04656672f ? 
                        0.0027964576f : 
                        -0.013981343f)) : 
                 (data[42 /* C43 */] <-0.1972099f ? 
                     (data[49 /* C50 */] <-0.04232064f ? 
                        -0.05371247f : 
                        -0.0044452134f) : 
                     (Double.isNaN(data[71]) || data[71 /* C72 */] <0.13139752f ? 
                        0.019792654f : 
                        0.006672195f))) : 
             (data[61 /* C62 */] <-0.10320158f ? 
                 (Double.isNaN(data[50]) || data[50 /* C51 */] <-0.06930123f ? 
                     (data[14 /* C15 */] <-0.22523208f ? 
                        -0.051711615f : 
                        -0.018037684f) : 
                     (Double.isNaN(data[35]) || data[35 /* C36 */] <0.08681837f ? 
                        -0.009704697f : 
                        0.022357041f)) : 
                 (data[0 /* C1 */] <-0.015678702f ? 
                     (Double.isNaN(data[28]) || data[28 /* C29 */] <0.024000607f ? 
                        0.0025914398f : 
                        0.022666434f) : 
                     (data[25 /* C26 */] <0.04133153f ? 
                        -0.013165497f : 
                        0.0019523358f)))) : 
         (data[95 /* C96 */] <-0.16065848f ? 
             (Double.isNaN(data[34]) || data[34 /* C35 */] <0.121839784f ? 
                 (Double.isNaN(data[70]) || data[70 /* C71 */] <-0.06678735f ? 
                     (data[7 /* C8 */] <-0.085360244f ? 
                        0.060234204f : 
                        0.021820901f) : 
                     (Double.isNaN(data[48]) || data[48 /* C49 */] <0.15801884f ? 
                        -0.004075011f : 
                        0.043036032f)) : 
                 (data[53 /* C54 */] <-0.19960588f ? 
                     (data[4 /* C5 */] <-0.16576427f ? 
                        0.10541483f : 
                        0.021483146f) : 
                     (Double.isNaN(data[70]) || data[70 /* C71 */] <0.2868524f ? 
                        -0.024561245f : 
                        0.09158393f))) : 
             (Double.isNaN(data[68]) || data[68 /* C69 */] <0.0077057993f ? 
                 (Double.isNaN(data[19]) || data[19 /* C20 */] <0.03784283f ? 
                     (Double.isNaN(data[8]) || data[8 /* C9 */] <-0.035914928f ? 
                        -0.011678112f : 
                        0.005719549f) : 
                     (Double.isNaN(data[13]) || data[13 /* C14 */] <-0.057983935f ? 
                        0.0010881453f : 
                        0.027625889f)) : 
                 (Double.isNaN(data[78]) || data[78 /* C79 */] <0.10819901f ? 
                     (Double.isNaN(data[5]) || data[5 /* C6 */] <-0.08787608f ? 
                        -0.018818546f : 
                        -0.034005694f) : 
                     (data[13 /* C14 */] <-0.3521493f ? 
                        -0.100508496f : 
                        0.001695226f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


